digraph CFA {
8 [shape="circle" label="N8\n58"]
46 [shape="circle" label="N46\n57"]
47 [shape="circle" label="N47\n56"]
48 [shape="circle" label="N48\n55"]
49 [shape="circle" label="N49\n54"]
50 [shape="circle" label="N50\n53"]
51 [shape="circle" label="N51\n52"]
52 [shape="circle" label="N52\n51"]
53 [shape="circle" label="N53\n50"]
54 [shape="circle" label="N54\n49"]
55 [shape="circle" label="N55\n48"]
56 [shape="circle" label="N56\n47"]
57 [shape="circle" label="N57\n46"]
58 [shape="circle" label="N58\n45"]
59 [shape="circle" label="N59\n44"]
60 [shape="circle" label="N60\n43"]
61 [shape="circle" label="N61\n42"]
62 [shape="circle" label="N62\n41"]
63 [shape="circle" label="N63\n40"]
64 [shape="circle" label="N64\n39"]
65 [shape="circle" label="N65\n38"]
66 [shape="circle" label="N66\n37"]
67 [shape="circle" label="N67\n36"]
9 [shape="circle" label="N9\n35"]
10 [shape="circle" label="N10\n34"]
11 [shape="circle" label="N11\n33"]
12 [shape="circle" label="N12\n32"]
13 [shape="circle" label="N13\n31"]
14 [shape="circle" label="N14\n30"]
15 [shape="circle" label="N15\n29"]
16 [shape="circle" label="N16\n28"]
17 [shape="circle" label="N17\n27"]
18 [shape="circle" label="N18\n26"]
19 [shape="doublecircle" label="N19\n25"]
20 [shape="diamond" label="N20\n24"]
24 [shape="circle" label="N24\n23"]
21 [shape="circle" label="N21\n22"]
39 [shape="diamond" label="N39\n21"]
68 [shape="circle" label="N68\n0"]
40 [shape="diamond" label="N40\n20"]
43 [shape="circle" label="N43\n19"]
1 [shape="circle" label="N1\n4"]
2 [shape="circle" label="N2\n3"]
4 [shape="circle" label="N4\n2"]
5 [shape="circle" label="N5\n1"]
0 [shape="circle" label="N0\n0"]
44 [shape="circle" label="N44\n18"]
41 [shape="circle" label="N41\n16"]
7 [shape="circle" label="N7\n15"]
42 [shape="circle" label="N42\n17"]
23 [shape="circle" label="N23\n14"]
22 [shape="diamond" label="N22\n13"]
28 [shape="circle" label="N28\n12"]
26 [shape="circle" label="N26\n3"]
36 [shape="circle" label="N36\n2"]
37 [shape="circle" label="N37\n1"]
38 [shape="circle" label="N38\n0"]
27 [shape="diamond" label="N27\n11"]
31 [shape="circle" label="N31\n10"]
29 [shape="circle" label="N29\n4"]
30 [shape="diamond" label="N30\n9"]
34 [shape="circle" label="N34\n8"]
32 [shape="circle" label="N32\n5"]
33 [shape="circle" label="N33\n7"]
35 [shape="circle" label="N35\n6"]
node [shape="circle"]
subgraph cluster_error {
label="error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 4 [label="Goto: ERROR"]
4 -> 5 [label="Label: ERROR"]
5 -> 0 [label="return;"]}
subgraph cluster_main {
label="main()"
8 -> 46 [label="INIT GLOBAL VARS"]
46 -> 47 [label="void __VERIFIER_assume(int);"]
47 -> 48 [label="int __VERIFIER_nondet_bool();"]
48 -> 49 [label="char __VERIFIER_nondet_char();"]
49 -> 50 [label="signed char __VERIFIER_nondet_schar();"]
50 -> 51 [label="unsigned char __VERIFIER_nondet_uchar();"]
51 -> 52 [label="int __VERIFIER_nondet_int();"]
52 -> 53 [label="unsigned int __VERIFIER_nondet_uint();"]
53 -> 54 [label="short int __VERIFIER_nondet_short();"]
54 -> 55 [label="unsigned short int __VERIFIER_nondet_ushort();"]
55 -> 56 [label="long int __VERIFIER_nondet_long();"]
56 -> 57 [label="unsigned long int __VERIFIER_nondet_ulong();"]
57 -> 58 [label="long long int __VERIFIER_nondet_longlong();"]
58 -> 59 [label="unsigned long long int __VERIFIER_nondet_ull();"]
59 -> 60 [label="float __VERIFIER_nondet_float();"]
60 -> 61 [label="double __VERIFIER_nondet_double();"]
61 -> 62 [label="long double __VERIFIER_nondet_longdouble();"]
62 -> 63 [label="void *__VERIFIER_nondet_pointer();"]
63 -> 64 [label="int modFlag = 0;"]
64 -> 65 [label="int res = 0;"]
65 -> 66 [label="void error();"]
66 -> 67 [label="int main();"]
67 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="modFlag = __VERIFIER_nondet_int();"]
10 -> 11 [label="res = __VERIFIER_nondet_int();"]
11 -> 12 [label="int n1 = 3;"]
12 -> 13 [label="int n2 = 5;"]
13 -> 14 [label="int n3 = 7;"]
14 -> 15 [label="res = 0;"]
15 -> 16 [label="int bound;"]
16 -> 17 [label="bound = __VERIFIER_nondet_int();"]
17 -> 18 [label="int i = 0;"]
18 -> 19 [label="while"]
19 -> 20 [label=""]
20 -> 23 [label="[i < bound]"]
20 -> 24 [label="[!(i < bound)]"]
24 -> 21 [label="break"]
21 -> 39 [label="modFlag = res;"]
39 -> 40 [label="[(modFlag % 105) == 0]"]
39 -> 68 [label="[!((modFlag % 105) == 0)]"]
40 -> 42 [label="[(modFlag % 105) == 0]"]
40 -> 43 [label="[!((modFlag % 105) == 0)]"]
43 -> 44 [label="error();" style="dotted" arrowhead="empty"]
44 -> 41 [label=""]
41 -> 7 [label="return 0;"]
42 -> 41 [label=""]
23 -> 22 [label=""]
22 -> 27 [label="[(i % n1) == 0]"]
22 -> 28 [label="[!((i % n1) == 0)]"]
28 -> 26 [label=""]
26 -> 36 [label="int __CPAchecker_TMP_0 = i;"]
36 -> 37 [label="i = i + 1;"]
37 -> 38 [label="__CPAchecker_TMP_0;"]
38 -> 19 [label=""]
27 -> 30 [label="[(i % n2) == 0]"]
27 -> 31 [label="[!((i % n2) == 0)]"]
31 -> 29 [label=""]
29 -> 26 [label=""]
30 -> 33 [label="[(i % n3) == 0]"]
30 -> 34 [label="[!((i % n3) == 0)]"]
34 -> 32 [label=""]
32 -> 29 [label=""]
33 -> 35 [label="res = i;"]
35 -> 32 [label=""]}
43 -> 1 [label="error()"]
0 -> 44 [label="Return edge from error to main: error();"]}