<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
 <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>../d_svcomp/overflow3.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">correctness_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 2.2 / svcomp23</data>
  <data key="specification">// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer &lt;https://www.sosy-lab.org&gt;
//
// SPDX-License-Identifier: Apache-2.0

// This automaton contains the specification of the
// Competition on Software Verification.
// It checks only for calls to the __VERIFIER_error()/reach_error() functions
// and also implements some functions which usually lead to a program abort.
CONTROL AUTOMATON SVCOMP

INITIAL STATE Init;

STATE USEFIRST Init :
  MATCH {__VERIFIER_error($?)} || MATCH {reach_error($?)} || MATCH FUNCTIONCALL "reach_error"
      -&gt; ERROR("unreach-call: $rawstatement called in $location");
  MATCH {__assert_fail($?)} || MATCH {abort($?)} || MATCH {exit($?)} -&gt; STOP;

END AUTOMATON</data>
  <data key="programfile">../d_svcomp/overflow3.c</data>
  <data key="programhash">61ece78eca5ffdf4f4edf84f4e8b3c0e3985d20729cc6cc6e4b75a5fe983f096</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2023-06-22T23:25:15-04:00</data>
  <node id="N19">
   <data key="entry">true</data>
  </node>
  <node id="N20"/>
  <edge source="N19" target="N20">
   <data key="startline">10</data>
   <data key="endline">10</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="N33">
   <data key="invariant">c == (32) || c == (34) || c == (1) || c == (22) || c == (15) || c == (44) || c == (11) || c == (43) || c == (8) || c == (14) || c == (25) || c == (57) || c == (19) || c == (41) || c == (28) || c == (64) || c == (9) || c == (46) || c == (26) || c == (5) || c == (66) || c == (40) || c == (0) || c == (7) || c == (59) || c == (4) || c == (23) || c == (38) || c == (54) || c == (27) || c == (50) || c == (62) || c == (16) || c == (29) || c == (17) || c == (36) || c == (42) || c == (31) || c == (30) || c == (33) || c == (48) || c == (20) || c == (10) || c == (18) || c == (39) || c == (6) || c == (35) || c == (13) || c == (21) || c == (65) || c == (45) || c == (12) || c == (47) || c == (56) || c == (72) || c == (37) || c == (70) || c == (3) || c == (71) || c == (58) || c == (51) || c == (52) || c == (2) || c == (24) || c == (69) || c == (61) || c == (53) || c == (49) || c == (63) || c == (60) || c == (55) || c == (74) || c == (67) || c == (68) || c == (75) || c == (73)</data>
   <data key="invariant.scope">main</data>
  </node>
  <edge source="N20" target="N33">
   <data key="enterLoopHead">true</data>
   <data key="startline">15</data>
   <data key="endline">15</data>
  </edge>
  <node id="N29">
   <data key="invariant">c == (32) || c == (34) || c == (1) || c == (22) || c == (15) || c == (44) || c == (11) || c == (43) || c == (8) || c == (14) || c == (25) || c == (57) || c == (19) || c == (41) || c == (28) || c == (64) || c == (9) || c == (46) || c == (26) || c == (5) || c == (66) || c == (40) || c == (0) || c == (7) || c == (59) || c == (4) || c == (23) || c == (38) || c == (54) || c == (27) || c == (50) || c == (62) || c == (16) || c == (29) || c == (17) || c == (36) || c == (42) || c == (31) || c == (30) || c == (33) || c == (48) || c == (20) || c == (10) || c == (18) || c == (39) || c == (6) || c == (35) || c == (13) || c == (21) || c == (65) || c == (45) || c == (12) || c == (47) || c == (56) || c == (72) || c == (37) || c == (70) || c == (3) || c == (71) || c == (58) || c == (51) || c == (52) || c == (2) || c == (24) || c == (69) || c == (61) || c == (53) || c == (49) || c == (63) || c == (60) || c == (55) || c == (74) || c == (67) || c == (68) || c == (75) || c == (73)</data>
   <data key="invariant.scope">main</data>
  </node>
  <edge source="N33" target="N29">
   <data key="startline">16</data>
   <data key="endline">16</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N37">
   <data key="invariant">c == (3) || c == (40) || c == (44) || c == (53) || c == (58) || c == (24) || c == (13) || c == (2) || c == (29) || c == (30) || c == (10) || c == (6) || c == (11) || c == (73) || c == (18) || c == (32) || c == (47) || c == (21) || c == (1) || c == (8) || c == (38) || c == (64) || c == (34) || c == (27) || c == (67) || c == (28) || c == (59) || c == (5) || c == (0) || c == (7) || c == (61) || c == (4) || c == (71) || c == (9) || c == (12) || c == (14) || c == (26) || c == (39) || c == (17) || c == (15) || c == (33) || c == (55) || c == (63) || c == (70) || c == (22) || c == (23) || c == (16) || c == (52) || c == (35) || c == (20) || c == (25) || c == (75) || c == (57) || c == (49) || c == (43) || c == (31) || c == (36) || c == (48) || c == (50) || c == (41) || c == (37) || c == (62) || c == (42) || c == (66) || c == (74) || c == (51) || c == (56) || c == (19) || c == (45) || c == (46) || c == (60) || c == (72) || c == (69) || c == (54) || c == (65) || c == (68) || c == (76)</data>
   <data key="invariant.scope">main</data>
  </node>
  <edge source="N33" target="N37">
   <data key="enterLoopHead">true</data>
   <data key="startline">16</data>
   <data key="endline">16</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="N37" target="N33">
   <data key="enterLoopHead">true</data>
   <data key="startline">17</data>
   <data key="endline">17</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N32">
   <data key="invariant">c == (3) || c == (40) || c == (44) || c == (53) || c == (58) || c == (24) || c == (13) || c == (2) || c == (29) || c == (30) || c == (10) || c == (6) || c == (11) || c == (73) || c == (18) || c == (32) || c == (47) || c == (21) || c == (1) || c == (8) || c == (38) || c == (64) || c == (34) || c == (27) || c == (67) || c == (28) || c == (59) || c == (5) || c == (0) || c == (7) || c == (61) || c == (4) || c == (71) || c == (9) || c == (12) || c == (14) || c == (26) || c == (39) || c == (17) || c == (15) || c == (33) || c == (55) || c == (63) || c == (70) || c == (22) || c == (23) || c == (16) || c == (52) || c == (35) || c == (20) || c == (25) || c == (75) || c == (57) || c == (49) || c == (43) || c == (31) || c == (36) || c == (48) || c == (50) || c == (41) || c == (37) || c == (62) || c == (42) || c == (66) || c == (74) || c == (51) || c == (56) || c == (19) || c == (45) || c == (46) || c == (60) || c == (72) || c == (69) || c == (54) || c == (65) || c == (68) || c == (76)</data>
   <data key="invariant.scope">main</data>
  </node>
  <edge source="N37" target="N32">
   <data key="startline">17</data>
   <data key="endline">17</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="N11"/>
  <edge source="N32" target="N11">
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="N13"/>
  <edge source="N11" target="N13">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N14"/>
  <edge source="N11" target="N14">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="N1"/>
  <edge source="N14" target="N1">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="enterFunction">reach_error</data>
  </edge>
  <edge source="N13" target="N37">
   <data key="enterLoopHead">true</data>
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <node id="N18"/>
  <edge source="N29" target="N18">
   <data key="startline">24</data>
   <data key="endline">24</data>
   <data key="returnFrom">main</data>
  </edge>
 </graph>
</graphml>
