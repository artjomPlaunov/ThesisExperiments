<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>../d_eva-svcomp/loop3.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">correctness_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 2.2 / svcomp23</data>
  <data key="specification">// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer &lt;https://www.sosy-lab.org&gt;
//
// SPDX-License-Identifier: Apache-2.0

// This automaton contains the specification of the
// Competition on Software Verification.
// It checks only for calls to the __VERIFIER_error()/reach_error() functions
// and also implements some functions which usually lead to a program abort.
CONTROL AUTOMATON SVCOMP

INITIAL STATE Init;

STATE USEFIRST Init :
  MATCH {__VERIFIER_error($?)} || MATCH {reach_error($?)} || MATCH FUNCTIONCALL "reach_error"
      -&gt; ERROR("unreach-call: $rawstatement called in $location");
  MATCH {__assert_fail($?)} || MATCH {abort($?)} || MATCH {exit($?)} -&gt; STOP;

END AUTOMATON</data>
  <data key="programfile">../d_eva-svcomp/loop3.c</data>
  <data key="programhash">b1060d50051c86afc41dfd816bb9d8e89515ef00666bfcc0e7912d1af5e38b90</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2023-06-23T01:46:22-04:00</data>
  <node id="N17">
   <data key="entry">true</data>
  </node>
  <node id="N18"/>
  <edge source="N17" target="N18">
   <data key="startline">11</data>
   <data key="endline">11</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="N23"/>
  <edge source="N18" target="N23">
   <data key="enterLoopHead">true</data>
   <data key="startline">12</data>
   <data key="endline">12</data>
  </edge>
  <node id="N21"/>
  <edge source="N23" target="N21">
   <data key="startline">14</data>
   <data key="endline">14</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="N22"/>
  <edge source="N23" target="N22">
   <data key="startline">14</data>
   <data key="endline">14</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N5"/>
  <edge source="N22" target="N5">
   <data key="startline">19</data>
   <data key="endline">19</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="N8"/>
  <edge source="N5" target="N8">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="N7"/>
  <edge source="N5" target="N7">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N25"/>
  <edge source="N7" target="N25">
   <data key="startline">19</data>
   <data key="endline">19</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <node id="N1"/>
  <edge source="N8" target="N1">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="enterFunction">reach_error</data>
  </edge>
  <node id="N10"/>
  <edge source="N1" target="N10">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="returnFrom">reach_error</data>
  </edge>
  <node id="N13"/>
  <edge source="N21" target="N13">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="enterFunction">f</data>
  </edge>
  <node id="N12"/>
  <edge source="N13" target="N12">
   <data key="startline">8</data>
   <data key="endline">8</data>
   <data key="returnFrom">f</data>
  </edge>
  <edge source="N12" target="N23">
   <data key="enterLoopHead">true</data>
   <data key="startline">15</data>
   <data key="endline">15</data>
  </edge>
 </graph>
</graphml>
