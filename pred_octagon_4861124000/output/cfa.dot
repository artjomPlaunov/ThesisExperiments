digraph CFA {
19 [shape="circle" label="N19\n49"]
61 [shape="circle" label="N61\n48"]
62 [shape="circle" label="N62\n47"]
63 [shape="circle" label="N63\n46"]
64 [shape="circle" label="N64\n45"]
65 [shape="circle" label="N65\n44"]
66 [shape="circle" label="N66\n43"]
67 [shape="circle" label="N67\n42"]
68 [shape="circle" label="N68\n41"]
69 [shape="circle" label="N69\n40"]
20 [shape="circle" label="N20\n39"]
21 [shape="circle" label="N21\n38"]
22 [shape="circle" label="N22\n37"]
23 [shape="circle" label="N23\n36"]
24 [shape="circle" label="N24\n35"]
25 [shape="circle" label="N25\n34"]
26 [shape="circle" label="N26\n33"]
27 [shape="circle" label="N27\n32"]
28 [shape="doublecircle" label="N28\n31"]
29 [shape="circle" label="N29\n30"]
31 [shape="circle" label="N31\n29"]
32 [shape="diamond" label="N32\n28"]
35 [shape="circle" label="N35\n26"]
36 [shape="circle" label="N36\n24"]
5 [shape="circle" label="N5\n5"]
6 [shape="diamond" label="N6\n4"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
44 [shape="circle" label="N44\n16"]
45 [shape="circle" label="N45\n15"]
46 [shape="circle" label="N46\n14"]
47 [shape="diamond" label="N47\n13"]
50 [shape="diamond" label="N50\n12"]
52 [shape="circle" label="N52\n11"]
48 [shape="circle" label="N48\n6"]
55 [shape="diamond" label="N55\n5"]
58 [shape="circle" label="N58\n3"]
59 [shape="circle" label="N59\n1"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
60 [shape="circle" label="N60\n0"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
72 [shape="circle" label="N72\n0"]
16 [shape="circle" label="N16\n3"]
56 [shape="diamond" label="N56\n4"]
57 [shape="circle" label="N57\n2"]
53 [shape="circle" label="N53\n10"]
54 [shape="circle" label="N54\n9"]
49 [shape="circle" label="N49\n8"]
51 [shape="circle" label="N51\n7"]
37 [shape="circle" label="N37\n23"]
38 [shape="circle" label="N38\n22"]
39 [shape="diamond" label="N39\n21"]
42 [shape="circle" label="N42\n19"]
43 [shape="circle" label="N43\n17"]
40 [shape="diamond" label="N40\n20"]
41 [shape="circle" label="N41\n18"]
8 [shape="circle" label="N8\n3"]
71 [shape="circle" label="N71\n0"]
33 [shape="diamond" label="N33\n27"]
34 [shape="circle" label="N34\n25"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="default return"]
8 -> 71 [label="abort();"]}
subgraph cluster_main {
label="main()"
19 -> 61 [label="INIT GLOBAL VARS"]
61 -> 62 [label="void abort();"]
62 -> 63 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
63 -> 64 [label="void reach_error();"]
64 -> 65 [label="void assume_abort_if_not(int cond);"]
65 -> 66 [label="void __VERIFIER_assert(int cond);"]
66 -> 67 [label="int __VERIFIER_nondet_int();"]
67 -> 68 [label="int N = 0;"]
68 -> 69 [label="int main();"]
69 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="int Y;"]
21 -> 22 [label="int X;"]
22 -> 23 [label="int D;"]
23 -> 24 [label="int S;"]
24 -> 25 [label="int R;"]
25 -> 26 [label="int flag;"]
26 -> 27 [label="Y = 0;"]
27 -> 28 [label="while"]
28 -> 29 [label=""]
29 -> 31 [label="X = __VERIFIER_nondet_int();"]
31 -> 32 [label="int __CPAchecker_TMP_0;"]
32 -> 33 [label="[X >= -1024]"]
32 -> 35 [label="[!(X >= -1024)]"]
35 -> 36 [label="__CPAchecker_TMP_0 = 0;"]
36 -> 37 [label="assume_abort_if_not(__CPAchecker_TMP_0);" style="dotted" arrowhead="empty"]
44 -> 45 [label="S = Y;"]
45 -> 46 [label="R = X - S;"]
46 -> 47 [label="Y = X;"]
47 -> 49 [label="[R <= (-D)]"]
47 -> 50 [label="[!(R <= (-D))]"]
50 -> 53 [label="[D <= R]"]
50 -> 52 [label="[!(D <= R)]"]
52 -> 48 [label=""]
48 -> 55 [label="int __CPAchecker_TMP_2;"]
55 -> 56 [label="[Y >= -1024]"]
55 -> 58 [label="[!(Y >= -1024)]"]
58 -> 59 [label="__CPAchecker_TMP_2 = 0;"]
59 -> 60 [label="__VERIFIER_assert(__CPAchecker_TMP_2);" style="dotted" arrowhead="empty"]
60 -> 28 [label=""]
56 -> 57 [label="[Y <= 1024]"]
56 -> 58 [label="[!(Y <= 1024)]"]
57 -> 59 [label="__CPAchecker_TMP_2 = 1;"]
53 -> 54 [label="Y = S + D;"]
54 -> 48 [label=""]
49 -> 51 [label="Y = S - D;"]
51 -> 48 [label=""]
37 -> 38 [label="D = __VERIFIER_nondet_int();"]
38 -> 39 [label="int __CPAchecker_TMP_1;"]
39 -> 40 [label="[D >= 0]"]
39 -> 42 [label="[!(D >= 0)]"]
42 -> 43 [label="__CPAchecker_TMP_1 = 0;"]
43 -> 44 [label="assume_abort_if_not(__CPAchecker_TMP_1);" style="dotted" arrowhead="empty"]
40 -> 41 [label="[D <= 16]"]
40 -> 42 [label="[!(D <= 16)]"]
41 -> 43 [label="__CPAchecker_TMP_1 = 1;"]
33 -> 34 [label="[X <= 1024]"]
33 -> 35 [label="[!(X <= 1024)]"]
34 -> 36 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 72 [label="__assert_fail(\"0\", \"ms1.c\", 10, \"reach_error\");"]}
36 -> 5 [label="assume_abort_if_not(__CPAchecker_TMP_0)"]
4 -> 37 [label="Return edge from assume_abort_if_not to main: assume_abort_if_not(__CPAchecker_TMP_0);"]
4 -> 44 [label="Return edge from assume_abort_if_not to main: assume_abort_if_not(__CPAchecker_TMP_1);"]
59 -> 11 [label="__VERIFIER_assert(__CPAchecker_TMP_2)"]
10 -> 60 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);"]
15 -> 1 [label="reach_error()"]
43 -> 5 [label="assume_abort_if_not(__CPAchecker_TMP_1)"]}