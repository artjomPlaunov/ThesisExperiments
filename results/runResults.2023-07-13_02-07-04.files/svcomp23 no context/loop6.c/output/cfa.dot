digraph CFA {
19 [shape="circle" label="N19\n71"]
82 [shape="circle" label="N82\n70"]
83 [shape="circle" label="N83\n69"]
84 [shape="circle" label="N84\n68"]
85 [shape="circle" label="N85\n67"]
86 [shape="circle" label="N86\n66"]
87 [shape="circle" label="N87\n65"]
88 [shape="circle" label="N88\n64"]
89 [shape="circle" label="N89\n63"]
90 [shape="circle" label="N90\n62"]
20 [shape="circle" label="N20\n61"]
21 [shape="circle" label="N21\n60"]
22 [shape="circle" label="N22\n59"]
23 [shape="circle" label="N23\n58"]
24 [shape="circle" label="N24\n57"]
25 [shape="doublecircle" label="N25\n56"]
27 [shape="circle" label="N27\n55"]
34 [shape="circle" label="N34\n54"]
35 [shape="doublecircle" label="N35\n53"]
37 [shape="circle" label="N37\n52"]
44 [shape="doublecircle" label="N44\n51"]
46 [shape="circle" label="N46\n50"]
53 [shape="doublecircle" label="N53\n49"]
55 [shape="circle" label="N55\n48"]
62 [shape="doublecircle" label="N62\n47"]
64 [shape="circle" label="N64\n46"]
71 [shape="doublecircle" label="N71\n45"]
73 [shape="circle" label="N73\n44"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
80 [shape="circle" label="N80\n43"]
18 [shape="circle" label="N18\n42"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
93 [shape="circle" label="N93\n0"]
16 [shape="circle" label="N16\n3"]
91 [shape="circle" label="N91\n0"]
72 [shape="circle" label="N72\n41"]
74 [shape="circle" label="N74\n40"]
75 [shape="circle" label="N75\n39"]
76 [shape="circle" label="N76\n38"]
77 [shape="circle" label="N77\n37"]
78 [shape="circle" label="N78\n36"]
79 [shape="circle" label="N79\n35"]
63 [shape="circle" label="N63\n34"]
65 [shape="circle" label="N65\n33"]
66 [shape="circle" label="N66\n32"]
67 [shape="circle" label="N67\n31"]
68 [shape="circle" label="N68\n30"]
69 [shape="circle" label="N69\n29"]
70 [shape="circle" label="N70\n28"]
54 [shape="circle" label="N54\n27"]
56 [shape="circle" label="N56\n26"]
57 [shape="circle" label="N57\n25"]
58 [shape="circle" label="N58\n24"]
59 [shape="circle" label="N59\n23"]
60 [shape="circle" label="N60\n22"]
61 [shape="circle" label="N61\n21"]
45 [shape="circle" label="N45\n20"]
47 [shape="circle" label="N47\n19"]
48 [shape="circle" label="N48\n18"]
49 [shape="circle" label="N49\n17"]
50 [shape="circle" label="N50\n16"]
51 [shape="circle" label="N51\n15"]
52 [shape="circle" label="N52\n14"]
36 [shape="circle" label="N36\n13"]
38 [shape="circle" label="N38\n12"]
39 [shape="circle" label="N39\n11"]
40 [shape="circle" label="N40\n10"]
41 [shape="circle" label="N41\n9"]
42 [shape="circle" label="N42\n8"]
43 [shape="circle" label="N43\n7"]
26 [shape="circle" label="N26\n6"]
28 [shape="circle" label="N28\n5"]
29 [shape="circle" label="N29\n4"]
30 [shape="circle" label="N30\n3"]
31 [shape="circle" label="N31\n2"]
32 [shape="circle" label="N32\n1"]
33 [shape="circle" label="N33\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 91 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 82 [label="INIT GLOBAL VARS"]
82 -> 83 [label="void abort();"]
83 -> 84 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
84 -> 85 [label="void reach_error();"]
85 -> 86 [label="void assume_abort_if_not(int cond);"]
86 -> 87 [label="void __VERIFIER_assert(int cond);"]
87 -> 88 [label="int __VERIFIER_nondet_int();"]
88 -> 89 [label="void __VERIFIER_assume(int);"]
89 -> 90 [label="int main();"]
90 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="unsigned int n = 10000;"]
21 -> 22 [label="unsigned int x = n;"]
22 -> 23 [label="unsigned int y = 0;"]
23 -> 24 [label="unsigned int z;"]
24 -> 25 [label="while"]
25 -> 26 [label="[x > 0]"]
25 -> 27 [label="[!(x > 0)]"]
27 -> 34 [label="z = y;"]
34 -> 35 [label="while"]
35 -> 36 [label="[z > 0]"]
35 -> 37 [label="[!(z > 0)]"]
37 -> 44 [label="while"]
44 -> 45 [label="[y > 0]"]
44 -> 46 [label="[!(y > 0)]"]
46 -> 53 [label="while"]
53 -> 54 [label="[x > 0]"]
53 -> 55 [label="[!(x > 0)]"]
55 -> 62 [label="while"]
62 -> 63 [label="[z > 0]"]
62 -> 64 [label="[!(z > 0)]"]
64 -> 71 [label="while"]
71 -> 72 [label="[y > 0]"]
71 -> 73 [label="[!(y > 0)]"]
73 -> 80 [label="__VERIFIER_assert(x == 0);" style="dotted" arrowhead="empty"]
73 -> 80 [label="__VERIFIER_assert(x == 0);"]
80 -> 18 [label="return 0;"]
72 -> 74 [label="unsigned int __CPAchecker_TMP_10 = y;"]
74 -> 75 [label="y = y - 1;"]
75 -> 76 [label="__CPAchecker_TMP_10;"]
76 -> 77 [label="unsigned int __CPAchecker_TMP_11 = x;"]
77 -> 78 [label="x = x - 1;"]
78 -> 79 [label="__CPAchecker_TMP_11;"]
79 -> 71 [label=""]
63 -> 65 [label="unsigned int __CPAchecker_TMP_8 = x;"]
65 -> 66 [label="x = x + 1;"]
66 -> 67 [label="__CPAchecker_TMP_8;"]
67 -> 68 [label="unsigned int __CPAchecker_TMP_9 = z;"]
68 -> 69 [label="z = z - 1;"]
69 -> 70 [label="__CPAchecker_TMP_9;"]
70 -> 62 [label=""]
54 -> 56 [label="unsigned int __CPAchecker_TMP_6 = x;"]
56 -> 57 [label="x = x - 1;"]
57 -> 58 [label="__CPAchecker_TMP_6;"]
58 -> 59 [label="unsigned int __CPAchecker_TMP_7 = y;"]
59 -> 60 [label="y = y + 1;"]
60 -> 61 [label="__CPAchecker_TMP_7;"]
61 -> 53 [label=""]
45 -> 47 [label="unsigned int __CPAchecker_TMP_4 = y;"]
47 -> 48 [label="y = y - 1;"]
48 -> 49 [label="__CPAchecker_TMP_4;"]
49 -> 50 [label="unsigned int __CPAchecker_TMP_5 = z;"]
50 -> 51 [label="z = z + 1;"]
51 -> 52 [label="__CPAchecker_TMP_5;"]
52 -> 44 [label=""]
36 -> 38 [label="unsigned int __CPAchecker_TMP_2 = x;"]
38 -> 39 [label="x = x + 1;"]
39 -> 40 [label="__CPAchecker_TMP_2;"]
40 -> 41 [label="unsigned int __CPAchecker_TMP_3 = z;"]
41 -> 42 [label="z = z - 1;"]
42 -> 43 [label="__CPAchecker_TMP_3;"]
43 -> 35 [label=""]
26 -> 28 [label="unsigned int __CPAchecker_TMP_0 = x;"]
28 -> 29 [label="x = x - 1;"]
29 -> 30 [label="__CPAchecker_TMP_0;"]
30 -> 31 [label="unsigned int __CPAchecker_TMP_1 = y;"]
31 -> 32 [label="y = y + 1;"]
32 -> 33 [label="__CPAchecker_TMP_1;"]
33 -> 25 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 93 [label="__assert_fail(\"0\", \"loop6.c\", 10, \"reach_error\");"]}
73 -> 11 [label="__VERIFIER_assert(x == 0)"]
10 -> 80 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(x == 0);"]
15 -> 1 [label="reach_error()"]}