digraph CFA {
19 [shape="circle" label="N19\n32"]
43 [shape="circle" label="N43\n31"]
44 [shape="circle" label="N44\n30"]
45 [shape="circle" label="N45\n29"]
46 [shape="circle" label="N46\n28"]
47 [shape="circle" label="N47\n27"]
48 [shape="circle" label="N48\n26"]
49 [shape="circle" label="N49\n25"]
50 [shape="circle" label="N50\n24"]
51 [shape="circle" label="N51\n23"]
20 [shape="circle" label="N20\n22"]
21 [shape="circle" label="N21\n21"]
22 [shape="circle" label="N22\n20"]
23 [shape="circle" label="N23\n19"]
24 [shape="diamond" label="N24\n18"]
27 [shape="circle" label="N27\n16"]
28 [shape="circle" label="N28\n14"]
5 [shape="circle" label="N5\n5"]
6 [shape="diamond" label="N6\n4"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
29 [shape="circle" label="N29\n13"]
30 [shape="circle" label="N30\n12"]
31 [shape="doublecircle" label="N31\n11"]
34 [shape="circle" label="N34\n10"]
36 [shape="diamond" label="N36\n9"]
39 [shape="circle" label="N39\n7"]
40 [shape="circle" label="N40\n5"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
41 [shape="circle" label="N41\n4"]
18 [shape="circle" label="N18\n3"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
54 [shape="circle" label="N54\n0"]
16 [shape="circle" label="N16\n3"]
52 [shape="circle" label="N52\n0"]
37 [shape="diamond" label="N37\n8"]
38 [shape="circle" label="N38\n6"]
33 [shape="circle" label="N33\n2"]
35 [shape="circle" label="N35\n1"]
32 [shape="circle" label="N32\n0"]
8 [shape="circle" label="N8\n3"]
53 [shape="circle" label="N53\n0"]
25 [shape="diamond" label="N25\n17"]
26 [shape="circle" label="N26\n15"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 52 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="default return"]
8 -> 53 [label="abort();"]}
subgraph cluster_main {
label="main()"
19 -> 43 [label="INIT GLOBAL VARS"]
43 -> 44 [label="void abort();"]
44 -> 45 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
45 -> 46 [label="void reach_error();"]
46 -> 47 [label="void assume_abort_if_not(int cond);"]
47 -> 48 [label="void __VERIFIER_assert(int cond);"]
48 -> 49 [label="int __VERIFIER_nondet_int();"]
49 -> 50 [label="void __VERIFIER_assume(int);"]
50 -> 51 [label="int main();"]
51 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="int y = 0;"]
21 -> 22 [label="int n;"]
22 -> 23 [label="n = __VERIFIER_nondet_int();"]
23 -> 24 [label="int __CPAchecker_TMP_0;"]
24 -> 25 [label="[n >= 100]"]
24 -> 27 [label="[!(n >= 100)]"]
27 -> 28 [label="__CPAchecker_TMP_0 = 0;"]
28 -> 29 [label="assume_abort_if_not(__CPAchecker_TMP_0);" style="dotted" arrowhead="empty"]
28 -> 29 [label="assume_abort_if_not(__CPAchecker_TMP_0);"]
29 -> 30 [label="for"]
30 -> 31 [label="int i = 0;"]
31 -> 33 [label="[i < n]"]
31 -> 34 [label="[!(i < n)]"]
34 -> 36 [label="int __CPAchecker_TMP_1;"]
36 -> 37 [label="[y >= 200]"]
36 -> 39 [label="[!(y >= 200)]"]
39 -> 40 [label="__CPAchecker_TMP_1 = 0;"]
40 -> 41 [label="__VERIFIER_assert(__CPAchecker_TMP_1);" style="dotted" arrowhead="empty"]
40 -> 41 [label="__VERIFIER_assert(__CPAchecker_TMP_1);"]
41 -> 18 [label="return 0;"]
37 -> 38 [label="[y <= 2000]"]
37 -> 39 [label="[!(y <= 2000)]"]
38 -> 40 [label="__CPAchecker_TMP_1 = 1;"]
33 -> 35 [label="y = y + 2;"]
35 -> 32 [label=""]
32 -> 31 [label="i = i + 1;"]
25 -> 26 [label="[n <= 1000]"]
25 -> 27 [label="[!(n <= 1000)]"]
26 -> 28 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 54 [label="__assert_fail(\"0\", \"gauge1.c\", 10, \"reach_error\");"]}
28 -> 5 [label="assume_abort_if_not(__CPAchecker_TMP_0)"]
4 -> 29 [label="Return edge from assume_abort_if_not to main: assume_abort_if_not(__CPAchecker_TMP_0);"]
40 -> 11 [label="__VERIFIER_assert(__CPAchecker_TMP_1)"]
10 -> 41 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_1);"]
15 -> 1 [label="reach_error()"]}