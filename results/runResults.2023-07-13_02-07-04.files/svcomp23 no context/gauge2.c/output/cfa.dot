digraph CFA {
19 [shape="circle" label="N19\n49"]
57 [shape="circle" label="N57\n48"]
58 [shape="circle" label="N58\n47"]
59 [shape="circle" label="N59\n46"]
60 [shape="circle" label="N60\n45"]
61 [shape="circle" label="N61\n44"]
62 [shape="circle" label="N62\n43"]
63 [shape="circle" label="N63\n42"]
64 [shape="circle" label="N64\n41"]
65 [shape="circle" label="N65\n40"]
66 [shape="circle" label="N66\n39"]
67 [shape="circle" label="N67\n38"]
68 [shape="circle" label="N68\n37"]
69 [shape="circle" label="N69\n36"]
20 [shape="circle" label="N20\n35"]
21 [shape="circle" label="N21\n34"]
22 [shape="circle" label="N22\n33"]
23 [shape="circle" label="N23\n32"]
24 [shape="circle" label="N24\n31"]
25 [shape="circle" label="N25\n30"]
26 [shape="circle" label="N26\n29"]
27 [shape="diamond" label="N27\n28"]
30 [shape="circle" label="N30\n26"]
31 [shape="circle" label="N31\n24"]
5 [shape="circle" label="N5\n5"]
6 [shape="diamond" label="N6\n4"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
32 [shape="circle" label="N32\n23"]
33 [shape="circle" label="N33\n22"]
34 [shape="circle" label="N34\n21"]
35 [shape="doublecircle" label="N35\n20"]
36 [shape="diamond" label="N36\n19"]
40 [shape="circle" label="N40\n18"]
37 [shape="circle" label="N37\n17"]
50 [shape="diamond" label="N50\n16"]
53 [shape="circle" label="N53\n14"]
54 [shape="circle" label="N54\n12"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
55 [shape="circle" label="N55\n11"]
18 [shape="circle" label="N18\n10"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
72 [shape="circle" label="N72\n0"]
16 [shape="circle" label="N16\n3"]
70 [shape="circle" label="N70\n0"]
51 [shape="diamond" label="N51\n15"]
52 [shape="circle" label="N52\n13"]
39 [shape="circle" label="N39\n9"]
38 [shape="diamond" label="N38\n8"]
43 [shape="circle" label="N43\n7"]
45 [shape="circle" label="N45\n6"]
42 [shape="circle" label="N42\n3"]
47 [shape="circle" label="N47\n2"]
48 [shape="circle" label="N48\n1"]
49 [shape="circle" label="N49\n0"]
44 [shape="circle" label="N44\n5"]
46 [shape="circle" label="N46\n4"]
8 [shape="circle" label="N8\n3"]
71 [shape="circle" label="N71\n0"]
28 [shape="diamond" label="N28\n27"]
29 [shape="circle" label="N29\n25"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 70 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="default return"]
8 -> 71 [label="abort();"]}
subgraph cluster_main {
label="main()"
19 -> 57 [label="INIT GLOBAL VARS"]
57 -> 58 [label="void abort();"]
58 -> 59 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
59 -> 60 [label="void reach_error();"]
60 -> 61 [label="void assume_abort_if_not(int cond);"]
61 -> 62 [label="void __VERIFIER_assert(int cond);"]
62 -> 63 [label="int __VERIFIER_nondet_int();"]
63 -> 64 [label="void __VERIFIER_assume(int);"]
64 -> 65 [label="int flag = 0;"]
65 -> 66 [label="int i = 0;"]
66 -> 67 [label="int n = 0;"]
67 -> 68 [label="int p = 0;"]
68 -> 69 [label="void main();"]
69 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="flag = __VERIFIER_nondet_int();"]
21 -> 22 [label="i = __VERIFIER_nondet_int();"]
22 -> 23 [label="n = __VERIFIER_nondet_int();"]
23 -> 24 [label="p = __VERIFIER_nondet_int();"]
24 -> 25 [label="p = 0;"]
25 -> 26 [label="n = __VERIFIER_nondet_int();"]
26 -> 27 [label="int __CPAchecker_TMP_0;"]
27 -> 28 [label="[n >= 100]"]
27 -> 30 [label="[!(n >= 100)]"]
30 -> 31 [label="__CPAchecker_TMP_0 = 0;"]
31 -> 32 [label="assume_abort_if_not(__CPAchecker_TMP_0);" style="dotted" arrowhead="empty"]
31 -> 32 [label="assume_abort_if_not(__CPAchecker_TMP_0);"]
32 -> 33 [label="flag = __VERIFIER_nondet_int();"]
33 -> 34 [label="i = 0;"]
34 -> 35 [label="while"]
35 -> 36 [label=""]
36 -> 39 [label="[i < n]"]
36 -> 40 [label="[!(i < n)]"]
40 -> 37 [label="break"]
37 -> 50 [label="int __CPAchecker_TMP_2;"]
50 -> 51 [label="[p >= 1600]"]
50 -> 53 [label="[!(p >= 1600)]"]
53 -> 54 [label="__CPAchecker_TMP_2 = 0;"]
54 -> 55 [label="__VERIFIER_assert(__CPAchecker_TMP_2);" style="dotted" arrowhead="empty"]
54 -> 55 [label="__VERIFIER_assert(__CPAchecker_TMP_2);"]
55 -> 18 [label="return;"]
51 -> 52 [label="[p <= 32000]"]
51 -> 53 [label="[!(p <= 32000)]"]
52 -> 54 [label="__CPAchecker_TMP_2 = 1;"]
39 -> 38 [label=""]
38 -> 44 [label="[flag == 0]"]
38 -> 43 [label="[!(flag == 0)]"]
43 -> 45 [label="p = p + 16;"]
45 -> 42 [label=""]
42 -> 47 [label="int __CPAchecker_TMP_1 = i;"]
47 -> 48 [label="i = i + 1;"]
48 -> 49 [label="__CPAchecker_TMP_1;"]
49 -> 35 [label=""]
44 -> 46 [label="p = p + 32;"]
46 -> 42 [label=""]
28 -> 29 [label="[n <= 1000]"]
28 -> 30 [label="[!(n <= 1000)]"]
29 -> 31 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 72 [label="__assert_fail(\"0\", \"gauge2.c\", 10, \"reach_error\");"]}
31 -> 5 [label="assume_abort_if_not(__CPAchecker_TMP_0)"]
4 -> 32 [label="Return edge from assume_abort_if_not to main: assume_abort_if_not(__CPAchecker_TMP_0);"]
54 -> 11 [label="__VERIFIER_assert(__CPAchecker_TMP_2)"]
10 -> 55 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);"]
15 -> 1 [label="reach_error()"]}