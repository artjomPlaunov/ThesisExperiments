digraph CFA {
19 [shape="circle" label="N19\n34"]
46 [shape="circle" label="N46\n33"]
47 [shape="circle" label="N47\n32"]
48 [shape="circle" label="N48\n31"]
49 [shape="circle" label="N49\n30"]
50 [shape="circle" label="N50\n29"]
51 [shape="circle" label="N51\n28"]
52 [shape="circle" label="N52\n27"]
53 [shape="circle" label="N53\n26"]
54 [shape="circle" label="N54\n25"]
20 [shape="circle" label="N20\n24"]
21 [shape="circle" label="N21\n23"]
22 [shape="circle" label="N22\n22"]
23 [shape="circle" label="N23\n21"]
24 [shape="circle" label="N24\n20"]
25 [shape="circle" label="N25\n19"]
26 [shape="circle" label="N26\n18"]
27 [shape="circle" label="N27\n17"]
28 [shape="diamond" label="N28\n16"]
30 [shape="circle" label="N30\n14"]
18 [shape="circle" label="N18\n9"]
31 [shape="diamond" label="N31\n15"]
29 [shape="circle" label="N29\n13"]
33 [shape="doublecircle" label="N33\n12"]
35 [shape="circle" label="N35\n11"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
44 [shape="circle" label="N44\n10"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
57 [shape="circle" label="N57\n0"]
16 [shape="circle" label="N16\n3"]
55 [shape="circle" label="N55\n0"]
34 [shape="circle" label="N34\n8"]
39 [shape="circle" label="N39\n7"]
40 [shape="diamond" label="N40\n6"]
37 [shape="circle" label="N37\n5"]
41 [shape="circle" label="N41\n4"]
36 [shape="circle" label="N36\n1"]
43 [shape="circle" label="N43\n0"]
38 [shape="circle" label="N38\n3"]
42 [shape="circle" label="N42\n2"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 55 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 46 [label="INIT GLOBAL VARS"]
46 -> 47 [label="void abort();"]
47 -> 48 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
48 -> 49 [label="void reach_error();"]
49 -> 50 [label="void assume_abort_if_not(int cond);"]
50 -> 51 [label="void __VERIFIER_assert(int cond);"]
51 -> 52 [label="int __VERIFIER_nondet_int();"]
52 -> 53 [label="void __VERIFIER_assume(int);"]
53 -> 54 [label="int main();"]
54 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="int i;"]
21 -> 22 [label="int n;"]
22 -> 23 [label="int a;"]
23 -> 24 [label="int b;"]
24 -> 25 [label="i = 0;"]
25 -> 26 [label="a = 0;"]
26 -> 27 [label="b = 0;"]
27 -> 28 [label="n = __VERIFIER_nondet_int();"]
28 -> 31 [label="[n >= 0]"]
28 -> 30 [label="[!(n >= 0)]"]
30 -> 18 [label="return 0;"]
31 -> 29 [label="[n <= 1000]"]
31 -> 30 [label="[!(n <= 1000)]"]
29 -> 33 [label="while"]
33 -> 34 [label="[i < n]"]
33 -> 35 [label="[!(i < n)]"]
35 -> 44 [label="__VERIFIER_assert(((a + b) % 2) == 0);" style="dotted" arrowhead="empty"]
35 -> 44 [label="__VERIFIER_assert(((a + b) % 2) == 0);"]
44 -> 18 [label="return 0;"]
34 -> 39 [label="int __CPAchecker_TMP_0;"]
39 -> 40 [label="__CPAchecker_TMP_0 = __VERIFIER_nondet_int();"]
40 -> 38 [label="[__CPAchecker_TMP_0 == 0]"]
40 -> 37 [label="[!(__CPAchecker_TMP_0 == 0)]"]
37 -> 41 [label="a = a + 2;"]
41 -> 36 [label=""]
36 -> 43 [label="i = i + 1;"]
43 -> 33 [label=""]
38 -> 42 [label="b = b + 2;"]
42 -> 36 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 57 [label="__assert_fail(\"0\", \"overflow1.c\", 10, \"reach_error\");"]}
35 -> 11 [label="__VERIFIER_assert(((a + b) % 2) == 0)"]
10 -> 44 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(((a + b) % 2) == 0);"]
15 -> 1 [label="reach_error()"]}