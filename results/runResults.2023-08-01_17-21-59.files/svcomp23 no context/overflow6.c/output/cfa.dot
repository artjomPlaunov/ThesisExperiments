digraph CFA {
19 [shape="circle" label="N19\n26"]
39 [shape="circle" label="N39\n25"]
40 [shape="circle" label="N40\n24"]
41 [shape="circle" label="N41\n23"]
42 [shape="circle" label="N42\n22"]
43 [shape="circle" label="N43\n21"]
44 [shape="circle" label="N44\n20"]
45 [shape="circle" label="N45\n19"]
46 [shape="circle" label="N46\n18"]
47 [shape="circle" label="N47\n17"]
20 [shape="circle" label="N20\n16"]
21 [shape="circle" label="N21\n15"]
22 [shape="circle" label="N22\n14"]
23 [shape="circle" label="N23\n13"]
24 [shape="diamond" label="N24\n12"]
26 [shape="circle" label="N26\n10"]
18 [shape="circle" label="N18\n0"]
27 [shape="diamond" label="N27\n11"]
25 [shape="circle" label="N25\n9"]
29 [shape="doublecircle" label="N29\n8"]
31 [shape="circle" label="N31\n2"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
37 [shape="circle" label="N37\n1"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
50 [shape="circle" label="N50\n0"]
16 [shape="circle" label="N16\n3"]
48 [shape="circle" label="N48\n0"]
30 [shape="circle" label="N30\n7"]
32 [shape="circle" label="N32\n6"]
33 [shape="diamond" label="N33\n5"]
34 [shape="circle" label="N34\n4"]
35 [shape="circle" label="N35\n3"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 48 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 39 [label="INIT GLOBAL VARS"]
39 -> 40 [label="void abort();"]
40 -> 41 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
41 -> 42 [label="void reach_error();"]
42 -> 43 [label="void assume_abort_if_not(int cond);"]
43 -> 44 [label="void __VERIFIER_assert(int cond);"]
44 -> 45 [label="int __VERIFIER_nondet_int();"]
45 -> 46 [label="void __VERIFIER_assume(int);"]
46 -> 47 [label="int main();"]
47 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="int i;"]
21 -> 22 [label="i = __VERIFIER_nondet_int();"]
22 -> 23 [label="int c;"]
23 -> 24 [label="c = __VERIFIER_nondet_int();"]
24 -> 27 [label="[c == 0]"]
24 -> 26 [label="[!(c == 0)]"]
26 -> 18 [label="return 0;"]
27 -> 25 [label="[i == 0]"]
27 -> 26 [label="[!(i == 0)]"]
25 -> 29 [label="while"]
29 -> 30 [label="[i < 100]"]
29 -> 31 [label="[!(i < 100)]"]
31 -> 37 [label="__VERIFIER_assert(c >= 0);" style="dotted" arrowhead="empty"]
31 -> 37 [label="__VERIFIER_assert(c >= 0);"]
37 -> 18 [label="return 0;"]
30 -> 32 [label="c = c + i;"]
32 -> 33 [label="i = i + 1;"]
33 -> 35 [label="[i <= 0]"]
33 -> 34 [label="[!(i <= 0)]"]
34 -> 29 [label=""]
35 -> 31 [label="break"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 50 [label="__assert_fail(\"0\", \"overflow6.c\", 10, \"reach_error\");"]}
31 -> 11 [label="__VERIFIER_assert(c >= 0)"]
10 -> 37 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(c >= 0);"]
15 -> 1 [label="reach_error()"]}