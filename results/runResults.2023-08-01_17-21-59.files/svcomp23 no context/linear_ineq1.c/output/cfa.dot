digraph CFA {
19 [shape="circle" label="N19\n29"]
41 [shape="circle" label="N41\n28"]
42 [shape="circle" label="N42\n27"]
43 [shape="circle" label="N43\n26"]
44 [shape="circle" label="N44\n25"]
45 [shape="circle" label="N45\n24"]
46 [shape="circle" label="N46\n23"]
47 [shape="circle" label="N47\n22"]
48 [shape="circle" label="N48\n21"]
49 [shape="circle" label="N49\n20"]
50 [shape="circle" label="N50\n19"]
20 [shape="circle" label="N20\n18"]
21 [shape="circle" label="N21\n17"]
22 [shape="diamond" label="N22\n16"]
23 [shape="circle" label="N23\n15"]
26 [shape="circle" label="N26\n14"]
27 [shape="circle" label="N27\n13"]
28 [shape="circle" label="N28\n12"]
29 [shape="doublecircle" label="N29\n11"]
31 [shape="diamond" label="N31\n10"]
35 [shape="circle" label="N35\n9"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
39 [shape="circle" label="N39\n8"]
18 [shape="circle" label="N18\n0"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
53 [shape="circle" label="N53\n0"]
16 [shape="circle" label="N16\n3"]
51 [shape="circle" label="N51\n0"]
36 [shape="circle" label="N36\n7"]
37 [shape="circle" label="N37\n6"]
30 [shape="circle" label="N30\n5"]
32 [shape="circle" label="N32\n4"]
33 [shape="circle" label="N33\n3"]
34 [shape="circle" label="N34\n2"]
24 [shape="circle" label="N24\n1"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 51 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 41 [label="INIT GLOBAL VARS"]
41 -> 42 [label="void abort();"]
42 -> 43 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
43 -> 44 [label="void reach_error();"]
44 -> 45 [label="void assume_abort_if_not(int cond);"]
45 -> 46 [label="void __VERIFIER_assert(int cond);"]
46 -> 47 [label="int __VERIFIER_nondet_int();"]
47 -> 48 [label="void __VERIFIER_assume(int);"]
48 -> 49 [label="unsigned char __VERIFIER_nondet_uchar();"]
49 -> 50 [label="int main();"]
50 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="unsigned char n;"]
21 -> 22 [label="n = __VERIFIER_nondet_uchar();"]
22 -> 24 [label="[n == 0]"]
22 -> 23 [label="[!(n == 0)]"]
23 -> 26 [label="unsigned char v = 0;"]
26 -> 27 [label="unsigned int s = 0;"]
27 -> 28 [label="unsigned int i = 0;"]
28 -> 29 [label="while"]
29 -> 30 [label="[i < n]"]
29 -> 31 [label="[!(i < n)]"]
31 -> 36 [label="[s < v]"]
31 -> 35 [label="[!(s < v)]"]
35 -> 39 [label="__VERIFIER_assert(s < 65026);" style="dotted" arrowhead="empty"]
35 -> 39 [label="__VERIFIER_assert(s < 65026);"]
39 -> 18 [label="return 0;"]
36 -> 37 [label="reach_error();" style="dotted" arrowhead="empty"]
36 -> 37 [label="reach_error();"]
37 -> 18 [label="return 1;"]
30 -> 32 [label="v = __VERIFIER_nondet_uchar();"]
32 -> 33 [label="s = s + v;"]
33 -> 34 [label="i = i + 1;"]
34 -> 29 [label=""]
24 -> 18 [label="return 0;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 53 [label="__assert_fail(\"0\", \"overflow1.c\", 10, \"reach_error\");"]}
35 -> 11 [label="__VERIFIER_assert(s < 65026)"]
10 -> 39 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(s < 65026);"]
15 -> 1 [label="reach_error()"]
36 -> 1 [label="reach_error()"]}