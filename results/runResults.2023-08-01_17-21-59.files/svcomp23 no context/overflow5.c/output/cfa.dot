digraph CFA {
37 [shape="circle" label="N37\n17"]
45 [shape="circle" label="N45\n16"]
46 [shape="circle" label="N46\n15"]
47 [shape="circle" label="N47\n14"]
48 [shape="circle" label="N48\n13"]
49 [shape="circle" label="N49\n12"]
50 [shape="circle" label="N50\n11"]
51 [shape="circle" label="N51\n10"]
52 [shape="circle" label="N52\n9"]
53 [shape="circle" label="N53\n8"]
54 [shape="circle" label="N54\n7"]
38 [shape="circle" label="N38\n6"]
39 [shape="circle" label="N39\n5"]
40 [shape="circle" label="N40\n4"]
41 [shape="circle" label="N41\n3"]
19 [shape="circle" label="N19\n16"]
20 [shape="circle" label="N20\n15"]
21 [shape="circle" label="N21\n14"]
22 [shape="circle" label="N22\n13"]
23 [shape="doublecircle" label="N23\n12"]
25 [shape="circle" label="N25\n11"]
18 [shape="circle" label="N18\n10"]
42 [shape="circle" label="N42\n2"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
43 [shape="circle" label="N43\n1"]
36 [shape="circle" label="N36\n0"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
57 [shape="circle" label="N57\n0"]
16 [shape="circle" label="N16\n3"]
55 [shape="circle" label="N55\n0"]
24 [shape="circle" label="N24\n9"]
26 [shape="diamond" label="N26\n8"]
29 [shape="circle" label="N29\n7"]
31 [shape="circle" label="N31\n6"]
27 [shape="circle" label="N27\n3"]
32 [shape="circle" label="N32\n2"]
33 [shape="circle" label="N33\n1"]
34 [shape="circle" label="N34\n0"]
28 [shape="circle" label="N28\n5"]
30 [shape="circle" label="N30\n4"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 55 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_f {
label="f()"
19 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="int tmp;"]
21 -> 22 [label="int count = 0;"]
22 -> 23 [label="while"]
23 -> 24 [label="[a > 1]"]
23 -> 25 [label="[!(a > 1)]"]
25 -> 18 [label="return count;"]
24 -> 26 [label="tmp = a % 2;"]
26 -> 28 [label="[tmp == 0]"]
26 -> 29 [label="[!(tmp == 0)]"]
29 -> 31 [label="a = a - 1;"]
31 -> 27 [label=""]
27 -> 32 [label="int __CPAchecker_TMP_0 = count;"]
32 -> 33 [label="count = count + 1;"]
33 -> 34 [label="__CPAchecker_TMP_0;"]
34 -> 23 [label=""]
28 -> 30 [label="a = a / 2;"]
30 -> 27 [label=""]}
subgraph cluster_main {
label="main()"
37 -> 45 [label="INIT GLOBAL VARS"]
45 -> 46 [label="void abort();"]
46 -> 47 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
47 -> 48 [label="void reach_error();"]
48 -> 49 [label="void assume_abort_if_not(int cond);"]
49 -> 50 [label="void __VERIFIER_assert(int cond);"]
50 -> 51 [label="int __VERIFIER_nondet_int();"]
51 -> 52 [label="void __VERIFIER_assume(int);"]
52 -> 53 [label="int f(int a);"]
53 -> 54 [label="int main();"]
54 -> 38 [label="Function start dummy edge"]
38 -> 39 [label="int x;"]
39 -> 40 [label="x = __VERIFIER_nondet_int();"]
40 -> 41 [label="int count;"]
41 -> 42 [label="count = f(x);" style="dotted" arrowhead="empty"]
41 -> 42 [label="count = f(x);"]
42 -> 43 [label="__VERIFIER_assert(count >= 0);" style="dotted" arrowhead="empty"]
42 -> 43 [label="__VERIFIER_assert(count >= 0);"]
43 -> 36 [label="return count;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 57 [label="__assert_fail(\"0\", \"overflow5.c\", 10, \"reach_error\");"]}
41 -> 19 [label="f(x)"]
18 -> 42 [label="Return edge from f to main: count = f(x);"]
42 -> 11 [label="__VERIFIER_assert(count >= 0)"]
10 -> 43 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(count >= 0);"]
15 -> 1 [label="reach_error()"]}