digraph CFA {
19 [shape="circle" label="N19\n42"]
54 [shape="circle" label="N54\n41"]
55 [shape="circle" label="N55\n40"]
56 [shape="circle" label="N56\n39"]
57 [shape="circle" label="N57\n38"]
58 [shape="circle" label="N58\n37"]
59 [shape="circle" label="N59\n36"]
60 [shape="circle" label="N60\n35"]
61 [shape="circle" label="N61\n34"]
62 [shape="circle" label="N62\n33"]
20 [shape="circle" label="N20\n32"]
21 [shape="circle" label="N21\n31"]
22 [shape="circle" label="N22\n30"]
23 [shape="circle" label="N23\n29"]
24 [shape="circle" label="N24\n28"]
25 [shape="circle" label="N25\n27"]
26 [shape="diamond" label="N26\n26"]
65 [shape="circle" label="N65\n0"]
27 [shape="diamond" label="N27\n25"]
66 [shape="circle" label="N66\n0"]
28 [shape="circle" label="N28\n24"]
29 [shape="circle" label="N29\n23"]
30 [shape="circle" label="N30\n22"]
31 [shape="circle" label="N31\n21"]
32 [shape="circle" label="N32\n20"]
33 [shape="doublecircle" label="N33\n19"]
35 [shape="circle" label="N35\n18"]
46 [shape="circle" label="N46\n17"]
47 [shape="diamond" label="N47\n16"]
50 [shape="circle" label="N50\n14"]
51 [shape="circle" label="N51\n12"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
52 [shape="circle" label="N52\n11"]
18 [shape="circle" label="N18\n10"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
67 [shape="circle" label="N67\n0"]
16 [shape="circle" label="N16\n3"]
63 [shape="circle" label="N63\n0"]
48 [shape="diamond" label="N48\n15"]
49 [shape="circle" label="N49\n13"]
34 [shape="diamond" label="N34\n9"]
38 [shape="diamond" label="N38\n8"]
42 [shape="circle" label="N42\n7"]
44 [shape="circle" label="N44\n6"]
36 [shape="circle" label="N36\n1"]
45 [shape="circle" label="N45\n0"]
41 [shape="circle" label="N41\n5"]
43 [shape="circle" label="N43\n4"]
37 [shape="circle" label="N37\n3"]
39 [shape="circle" label="N39\n2"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 63 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 54 [label="INIT GLOBAL VARS"]
54 -> 55 [label="void abort();"]
55 -> 56 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
56 -> 57 [label="void reach_error();"]
57 -> 58 [label="void assume_abort_if_not(int cond);"]
58 -> 59 [label="void __VERIFIER_assert(int cond);"]
59 -> 60 [label="int __VERIFIER_nondet_int();"]
60 -> 61 [label="void __VERIFIER_assume(int);"]
61 -> 62 [label="int main();"]
62 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="unsigned int n;"]
21 -> 22 [label="unsigned int i;"]
22 -> 23 [label="unsigned int k;"]
23 -> 24 [label="unsigned int j;"]
24 -> 25 [label="unsigned int l = 0;"]
25 -> 26 [label="n = __VERIFIER_nondet_uint();"]
26 -> 27 [label="[n >= 100]"]
26 -> 65 [label="[!(n >= 100)]"]
27 -> 28 [label="[n <= 1000]"]
27 -> 66 [label="[!(n <= 1000)]"]
28 -> 29 [label="i = 0;"]
29 -> 30 [label="j = 0;"]
30 -> 31 [label="k = 0;"]
31 -> 32 [label="l = 0;"]
32 -> 33 [label="while"]
33 -> 34 [label="[l < n]"]
33 -> 35 [label="[!(l < n)]"]
35 -> 46 [label="int sum = (i + j) + k;"]
46 -> 47 [label="int __CPAchecker_TMP_0;"]
47 -> 48 [label="[sum >= 100]"]
47 -> 50 [label="[!(sum >= 100)]"]
50 -> 51 [label="__CPAchecker_TMP_0 = 0;"]
51 -> 52 [label="__VERIFIER_assert(__CPAchecker_TMP_0);" style="dotted" arrowhead="empty"]
51 -> 52 [label="__VERIFIER_assert(__CPAchecker_TMP_0);"]
52 -> 18 [label="return 0;"]
48 -> 49 [label="[sum <= 1000]"]
48 -> 50 [label="[!(sum <= 1000)]"]
49 -> 51 [label="__CPAchecker_TMP_0 = 1;"]
34 -> 37 [label="[(l % 3) == 0]"]
34 -> 38 [label="[!((l % 3) == 0)]"]
38 -> 41 [label="[(l % 3) == 1]"]
38 -> 42 [label="[!((l % 3) == 1)]"]
42 -> 44 [label="k = k + 1;"]
44 -> 36 [label=""]
36 -> 45 [label="l = l + 1;"]
45 -> 33 [label=""]
41 -> 43 [label="j = j + 1;"]
43 -> 36 [label=""]
37 -> 39 [label="i = i + 1;"]
39 -> 36 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 67 [label="__assert_fail(\"0\", \"mod2.c\", 10, \"reach_error\");"]}
51 -> 11 [label="__VERIFIER_assert(__CPAchecker_TMP_0)"]
10 -> 52 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_0);"]
15 -> 1 [label="reach_error()"]}