digraph main {
19 [shape="circle" label="N19\n17"]
27 [shape="circle" label="N27\n16"]
22 [shape="doublecircle" label="N22\n5"]
23 [shape="circle" label="N23\n1"]
24 [shape="circle" label="N24\n4"]
26 [shape="circle" label="N26\n3"]
18 [shape="circle" label="N18\n2"]
27 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">27</td><td align="left">void abort();</td></tr><tr><td align="right">28</td><td align="left">void __assert_fail(const char *, const char *, unsigned int, const char *);</td></tr><tr><td align="right">29</td><td align="left">void reach_error();</td></tr><tr><td align="right">30</td><td align="left">void assume_abort_if_not(int cond);</td></tr><tr><td align="right">31</td><td align="left">void __VERIFIER_assert(int cond);</td></tr><tr><td align="right">32</td><td align="left">int __VERIFIER_nondet_int();</td></tr><tr><td align="right">33</td><td align="left">void __VERIFIER_assume(int);</td></tr><tr><td align="right">34</td><td align="left">int main();</td></tr><tr><td align="right">35</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">20</td><td align="left">unsigned int x = 10;</td></tr><tr><td align="right">21</td><td align="left">while</td></tr></table>>]
27 -> 22[label=""]
23 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">23</td><td align="left">x = x + 2;</td></tr><tr><td align="right">25</td><td align="left"></td></tr></table>>]
23 -> 22[label=""]
19 -> 27 [label="INIT GLOBAL VARS" fontname="Courier New"]
22 -> 23 [label="[x >= 10]" fontname="Courier New"]
22 -> 24 [label="[!(x >= 10)]" fontname="Courier New"]
100001 [shape="component" label="__VERIFIER_assert"]
24 -> 100001 [label="__VERIFIER_assert(0 == (x % 2));" fontname="Courier New"]
100001 -> 26 [label="" fontname="Courier New"]
24 -> 26 [label="__VERIFIER_assert(0 == (x % 2));" fontname="Courier New"]
26 -> 18 [label="default return" fontname="Courier New"]
}