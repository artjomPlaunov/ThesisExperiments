digraph main {
17 [shape="circle" label="N17\n30"]
39 [shape="circle" label="N39\n29"]
23 [shape="doublecircle" label="N23\n15"]
25 [shape="circle" label="N25\n2"]
26 [shape="diamond" label="N26\n14"]
30 [shape="diamond" label="N30\n13"]
28 [shape="circle" label="N28\n6"]
16 [shape="circle" label="N16\n5"]
29 [shape="circle" label="N29\n12"]
33 [shape="doublecircle" label="N33\n9"]
34 [shape="circle" label="N34\n4"]
35 [shape="circle" label="N35\n8"]
37 [shape="circle" label="N37\n7"]
27 [shape="circle" label="N27\n1"]
39 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">39</td><td align="left">void abort();</td></tr><tr><td align="right">40</td><td align="left">void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">41</td><td align="left">void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">42</td><td align="left">void __assert(const char *__assertion, const char *__file, int __line);</td></tr><tr><td align="right">43</td><td align="left">void reach_error();</td></tr><tr><td align="right">44</td><td align="left">int __VERIFIER_nondet_int();</td></tr><tr><td align="right">45</td><td align="left">void __VERIFIER_assert(int cond);</td></tr><tr><td align="right">46</td><td align="left">int main();</td></tr><tr><td align="right">47</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">18</td><td align="left">int a[100000];</td></tr><tr><td align="right">19</td><td align="left">int marker = 42;</td></tr><tr><td align="right">20</td><td align="left">int pos = 543;</td></tr><tr><td align="right">21</td><td align="left">for</td></tr><tr><td align="right">22</td><td align="left">int i = 0;</td></tr></table>>]
39 -> 23[label=""]
29 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">29</td><td align="left">a[pos] = marker;</td></tr><tr><td align="right">31</td><td align="left">int i__1 = 0;</td></tr><tr><td align="right">32</td><td align="left">while</td></tr></table>>]
29 -> 33[label=""]
34 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">34</td><td align="left">i__1 = i__1 + 1;</td></tr><tr><td align="right">36</td><td align="left"></td></tr></table>>]
34 -> 33[label=""]
27 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">27</td><td align="left"></td></tr><tr><td align="right">24</td><td align="left">i = i + 1;</td></tr></table>>]
27 -> 23[label=""]
17 -> 39 [label="INIT GLOBAL VARS" fontname="Courier New"]
23 -> 25 [label="[i < 100000]" fontname="Courier New"]
23 -> 26 [label="[!(i < 100000)]" fontname="Courier New"]
26 -> 30 [label="[pos >= 0]" fontname="Courier New"]
26 -> 28 [label="[!(pos >= 0)]" fontname="Courier New"]
28 -> 16 [label="return 0;" fontname="Courier New"]
30 -> 29 [label="[pos < 100000]" fontname="Courier New"]
30 -> 28 [label="[!(pos < 100000)]" fontname="Courier New"]
33 -> 34 [label="[(a[i__1]) != marker]" fontname="Courier New"]
33 -> 35 [label="[!((a[i__1]) != marker)]" fontname="Courier New"]
100001 [shape="component" label="__VERIFIER_assert"]
35 -> 100001 [label="__VERIFIER_assert(i__1 == pos);" fontname="Courier New"]
100001 -> 37 [label="" fontname="Courier New"]
35 -> 37 [label="__VERIFIER_assert(i__1 == pos);" fontname="Courier New"]
37 -> 28 [label="" fontname="Courier New"]
25 -> 27 [label="a[i] = 41;" fontname="Courier New"]
}