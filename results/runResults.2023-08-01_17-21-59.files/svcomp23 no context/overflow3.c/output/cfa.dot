digraph CFA {
19 [shape="circle" label="N19\n28"]
39 [shape="circle" label="N39\n27"]
40 [shape="circle" label="N40\n26"]
41 [shape="circle" label="N41\n25"]
42 [shape="circle" label="N42\n24"]
43 [shape="circle" label="N43\n23"]
44 [shape="circle" label="N44\n22"]
45 [shape="circle" label="N45\n21"]
46 [shape="circle" label="N46\n20"]
47 [shape="circle" label="N47\n19"]
20 [shape="circle" label="N20\n18"]
21 [shape="circle" label="N21\n17"]
22 [shape="circle" label="N22\n16"]
23 [shape="circle" label="N23\n15"]
24 [shape="circle" label="N24\n14"]
25 [shape="circle" label="N25\n13"]
26 [shape="circle" label="N26\n12"]
27 [shape="doublecircle" label="N27\n11"]
29 [shape="circle" label="N29\n9"]
18 [shape="circle" label="N18\n8"]
30 [shape="diamond" label="N30\n10"]
28 [shape="circle" label="N28\n7"]
31 [shape="doublecircle" label="N31\n6"]
33 [shape="circle" label="N33\n5"]
32 [shape="circle" label="N32\n4"]
34 [shape="circle" label="N34\n3"]
35 [shape="circle" label="N35\n2"]
36 [shape="circle" label="N36\n1"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
37 [shape="circle" label="N37\n0"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
50 [shape="circle" label="N50\n0"]
16 [shape="circle" label="N16\n3"]
48 [shape="circle" label="N48\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 48 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 39 [label="INIT GLOBAL VARS"]
39 -> 40 [label="void abort();"]
40 -> 41 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
41 -> 42 [label="void reach_error();"]
42 -> 43 [label="void assume_abort_if_not(int cond);"]
43 -> 44 [label="void __VERIFIER_assert(int cond);"]
44 -> 45 [label="int __VERIFIER_nondet_int();"]
45 -> 46 [label="void __VERIFIER_assume(int);"]
46 -> 47 [label="int main();"]
47 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="int c;"]
21 -> 22 [label="int x;"]
22 -> 23 [label="int y;"]
23 -> 24 [label="x = __VERIFIER_nondet_int();"]
24 -> 25 [label="y = __VERIFIER_nondet_int();"]
25 -> 26 [label="c = 0;"]
26 -> 27 [label="while"]
27 -> 30 [label="[x == y]"]
27 -> 29 [label="[!(x == y)]"]
29 -> 18 [label="return 0;"]
30 -> 28 [label="[x > 0]"]
30 -> 29 [label="[!(x > 0)]"]
28 -> 31 [label="while"]
31 -> 32 [label="[y > 0]"]
31 -> 33 [label="[!(y > 0)]"]
33 -> 27 [label=""]
32 -> 34 [label="x = x - 1;"]
34 -> 35 [label="y = y - 1;"]
35 -> 36 [label="c = c + 1;"]
36 -> 37 [label="__VERIFIER_assert(c > 0);" style="dotted" arrowhead="empty"]
36 -> 37 [label="__VERIFIER_assert(c > 0);"]
37 -> 31 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 50 [label="__assert_fail(\"0\", \"overflow3.c\", 10, \"reach_error\");"]}
36 -> 11 [label="__VERIFIER_assert(c > 0)"]
10 -> 37 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(c > 0);"]
15 -> 1 [label="reach_error()"]}