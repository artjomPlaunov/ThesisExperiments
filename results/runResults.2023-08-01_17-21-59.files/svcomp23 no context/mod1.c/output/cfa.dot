digraph CFA {
19 [shape="circle" label="N19\n43"]
53 [shape="circle" label="N53\n42"]
54 [shape="circle" label="N54\n41"]
55 [shape="circle" label="N55\n40"]
56 [shape="circle" label="N56\n39"]
57 [shape="circle" label="N57\n38"]
58 [shape="circle" label="N58\n37"]
59 [shape="circle" label="N59\n36"]
60 [shape="circle" label="N60\n35"]
61 [shape="circle" label="N61\n34"]
62 [shape="circle" label="N62\n33"]
63 [shape="circle" label="N63\n32"]
20 [shape="circle" label="N20\n31"]
21 [shape="circle" label="N21\n30"]
22 [shape="circle" label="N22\n29"]
23 [shape="circle" label="N23\n28"]
24 [shape="circle" label="N24\n27"]
25 [shape="circle" label="N25\n26"]
26 [shape="circle" label="N26\n25"]
27 [shape="circle" label="N27\n24"]
28 [shape="circle" label="N28\n23"]
29 [shape="circle" label="N29\n22"]
30 [shape="doublecircle" label="N30\n21"]
31 [shape="diamond" label="N31\n20"]
35 [shape="circle" label="N35\n19"]
32 [shape="circle" label="N32\n18"]
50 [shape="circle" label="N50\n17"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
51 [shape="circle" label="N51\n16"]
18 [shape="circle" label="N18\n15"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
66 [shape="circle" label="N66\n0"]
16 [shape="circle" label="N16\n3"]
64 [shape="circle" label="N64\n0"]
34 [shape="circle" label="N34\n14"]
33 [shape="diamond" label="N33\n13"]
39 [shape="circle" label="N39\n12"]
37 [shape="circle" label="N37\n3"]
47 [shape="circle" label="N47\n2"]
48 [shape="circle" label="N48\n1"]
49 [shape="circle" label="N49\n0"]
38 [shape="diamond" label="N38\n11"]
42 [shape="circle" label="N42\n10"]
40 [shape="circle" label="N40\n4"]
41 [shape="diamond" label="N41\n9"]
45 [shape="circle" label="N45\n8"]
43 [shape="circle" label="N43\n5"]
44 [shape="circle" label="N44\n7"]
46 [shape="circle" label="N46\n6"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 64 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 53 [label="INIT GLOBAL VARS"]
53 -> 54 [label="void abort();"]
54 -> 55 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
55 -> 56 [label="void reach_error();"]
56 -> 57 [label="void assume_abort_if_not(int cond);"]
57 -> 58 [label="void __VERIFIER_assert(int cond);"]
58 -> 59 [label="int __VERIFIER_nondet_int();"]
59 -> 60 [label="void __VERIFIER_assume(int);"]
60 -> 61 [label="int modFlag = 0;"]
61 -> 62 [label="int res = 0;"]
62 -> 63 [label="int main();"]
63 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="modFlag = __VERIFIER_nondet_int();"]
21 -> 22 [label="res = __VERIFIER_nondet_int();"]
22 -> 23 [label="int n1 = 3;"]
23 -> 24 [label="int n2 = 5;"]
24 -> 25 [label="int n3 = 7;"]
25 -> 26 [label="res = 0;"]
26 -> 27 [label="int bound;"]
27 -> 28 [label="bound = __VERIFIER_nondet_int();"]
28 -> 29 [label="int i = 0;"]
29 -> 30 [label="while"]
30 -> 31 [label=""]
31 -> 34 [label="[i < bound]"]
31 -> 35 [label="[!(i < bound)]"]
35 -> 32 [label="break"]
32 -> 50 [label="modFlag = res;"]
50 -> 51 [label="__VERIFIER_assert((modFlag % 105) == 0);" style="dotted" arrowhead="empty"]
50 -> 51 [label="__VERIFIER_assert((modFlag % 105) == 0);"]
51 -> 18 [label="return 0;"]
34 -> 33 [label=""]
33 -> 38 [label="[(i % n1) == 0]"]
33 -> 39 [label="[!((i % n1) == 0)]"]
39 -> 37 [label=""]
37 -> 47 [label="int __CPAchecker_TMP_0 = i;"]
47 -> 48 [label="i = i + 1;"]
48 -> 49 [label="__CPAchecker_TMP_0;"]
49 -> 30 [label=""]
38 -> 41 [label="[(i % n2) == 0]"]
38 -> 42 [label="[!((i % n2) == 0)]"]
42 -> 40 [label=""]
40 -> 37 [label=""]
41 -> 44 [label="[(i % n3) == 0]"]
41 -> 45 [label="[!((i % n3) == 0)]"]
45 -> 43 [label=""]
43 -> 40 [label=""]
44 -> 46 [label="res = i;"]
46 -> 43 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 66 [label="__assert_fail(\"0\", \"mod1.c\", 10, \"reach_error\");"]}
50 -> 11 [label="__VERIFIER_assert((modFlag % 105) == 0)"]
10 -> 51 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((modFlag % 105) == 0);"]
15 -> 1 [label="reach_error()"]}