digraph CFA {
19 [shape="circle" label="N19\n39"]
46 [shape="circle" label="N46\n38"]
47 [shape="circle" label="N47\n37"]
48 [shape="circle" label="N48\n36"]
49 [shape="circle" label="N49\n35"]
50 [shape="circle" label="N50\n34"]
51 [shape="circle" label="N51\n33"]
52 [shape="circle" label="N52\n32"]
53 [shape="circle" label="N53\n31"]
54 [shape="circle" label="N54\n30"]
55 [shape="circle" label="N55\n29"]
56 [shape="circle" label="N56\n28"]
57 [shape="circle" label="N57\n27"]
58 [shape="circle" label="N58\n26"]
59 [shape="circle" label="N59\n25"]
20 [shape="circle" label="N20\n24"]
21 [shape="circle" label="N21\n23"]
22 [shape="circle" label="N22\n22"]
23 [shape="circle" label="N23\n21"]
24 [shape="circle" label="N24\n20"]
25 [shape="circle" label="N25\n19"]
26 [shape="circle" label="N26\n18"]
27 [shape="circle" label="N27\n17"]
28 [shape="doublecircle" label="N28\n16"]
29 [shape="diamond" label="N29\n15"]
33 [shape="circle" label="N33\n14"]
30 [shape="circle" label="N30\n13"]
43 [shape="circle" label="N43\n12"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
44 [shape="circle" label="N44\n11"]
18 [shape="circle" label="N18\n10"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
62 [shape="circle" label="N62\n0"]
16 [shape="circle" label="N16\n3"]
60 [shape="circle" label="N60\n0"]
32 [shape="circle" label="N32\n9"]
31 [shape="diamond" label="N31\n8"]
35 [shape="circle" label="N35\n3"]
40 [shape="circle" label="N40\n2"]
41 [shape="circle" label="N41\n1"]
42 [shape="circle" label="N42\n0"]
36 [shape="diamond" label="N36\n7"]
37 [shape="circle" label="N37\n6"]
38 [shape="circle" label="N38\n5"]
39 [shape="circle" label="N39\n4"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 60 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
19 -> 46 [label="INIT GLOBAL VARS"]
46 -> 47 [label="void abort();"]
47 -> 48 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
48 -> 49 [label="void reach_error();"]
49 -> 50 [label="void assume_abort_if_not(int cond);"]
50 -> 51 [label="void __VERIFIER_assert(int cond);"]
51 -> 52 [label="int __VERIFIER_nondet_int();"]
52 -> 53 [label="void __VERIFIER_assume(int);"]
53 -> 54 [label="int modFlag = 0;"]
54 -> 55 [label="int res = 0;"]
55 -> 56 [label="int n1 = 0;"]
56 -> 57 [label="int n2 = 0;"]
57 -> 58 [label="int bound = 0;"]
58 -> 59 [label="int main();"]
59 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="modFlag = __VERIFIER_nondet_int();"]
21 -> 22 [label="res = __VERIFIER_nondet_int();"]
22 -> 23 [label="int n1__1 = 432;"]
23 -> 24 [label="int n2__1 = 4325;"]
24 -> 25 [label="res = 0;"]
25 -> 26 [label="bound = __VERIFIER_nondet_int();"]
26 -> 27 [label="int i = 0;"]
27 -> 28 [label="while"]
28 -> 29 [label=""]
29 -> 32 [label="[i < bound]"]
29 -> 33 [label="[!(i < bound)]"]
33 -> 30 [label="break"]
30 -> 43 [label="modFlag = res;"]
43 -> 44 [label="__VERIFIER_assert((modFlag % 1868400) == 0);" style="dotted" arrowhead="empty"]
43 -> 44 [label="__VERIFIER_assert((modFlag % 1868400) == 0);"]
44 -> 18 [label="return 0;"]
32 -> 31 [label=""]
31 -> 36 [label="[(i % n1__1) == 0]"]
31 -> 35 [label="[!((i % n1__1) == 0)]"]
35 -> 40 [label="int __CPAchecker_TMP_0 = i;"]
40 -> 41 [label="i = i + 1;"]
41 -> 42 [label="__CPAchecker_TMP_0;"]
42 -> 28 [label=""]
36 -> 38 [label="[(i % n2__1) == 0]"]
36 -> 37 [label="[!((i % n2__1) == 0)]"]
37 -> 35 [label=""]
38 -> 39 [label="res = i;"]
39 -> 35 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 62 [label="__assert_fail(\"0\", \"mod3.c\", 10, \"reach_error\");"]}
43 -> 11 [label="__VERIFIER_assert((modFlag % 1868400) == 0)"]
10 -> 44 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((modFlag % 1868400) == 0);"]
15 -> 1 [label="reach_error()"]}