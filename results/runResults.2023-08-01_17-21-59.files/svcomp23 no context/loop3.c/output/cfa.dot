digraph CFA {
23 [shape="circle" label="N23\n18"]
31 [shape="circle" label="N31\n17"]
32 [shape="circle" label="N32\n16"]
33 [shape="circle" label="N33\n15"]
34 [shape="circle" label="N34\n14"]
35 [shape="circle" label="N35\n13"]
36 [shape="circle" label="N36\n12"]
37 [shape="circle" label="N37\n11"]
38 [shape="circle" label="N38\n10"]
39 [shape="circle" label="N39\n9"]
40 [shape="circle" label="N40\n8"]
24 [shape="circle" label="N24\n7"]
25 [shape="circle" label="N25\n6"]
26 [shape="doublecircle" label="N26\n5"]
28 [shape="circle" label="N28\n4"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
30 [shape="circle" label="N30\n3"]
22 [shape="circle" label="N22\n2"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
43 [shape="circle" label="N43\n0"]
16 [shape="circle" label="N16\n3"]
41 [shape="circle" label="N41\n0"]
27 [shape="circle" label="N27\n1"]
19 [shape="circle" label="N19\n2"]
20 [shape="circle" label="N20\n1"]
18 [shape="circle" label="N18\n0"]
29 [shape="circle" label="N29\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 41 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_f {
label="f()"
19 -> 20 [label="Function start dummy edge"]
20 -> 18 [label="return z + 2;"]}
subgraph cluster_main {
label="main()"
23 -> 31 [label="INIT GLOBAL VARS"]
31 -> 32 [label="void abort();"]
32 -> 33 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
33 -> 34 [label="void reach_error();"]
34 -> 35 [label="void assume_abort_if_not(int cond);"]
35 -> 36 [label="void __VERIFIER_assert(int cond);"]
36 -> 37 [label="int __VERIFIER_nondet_int();"]
37 -> 38 [label="void __VERIFIER_assume(int);"]
38 -> 39 [label="unsigned int f(unsigned int z);"]
39 -> 40 [label="int main();"]
40 -> 24 [label="Function start dummy edge"]
24 -> 25 [label="unsigned int x = 0;"]
25 -> 26 [label="while"]
26 -> 27 [label="[x < 268435455]"]
26 -> 28 [label="[!(x < 268435455)]"]
28 -> 30 [label="__VERIFIER_assert(0 == (x % 2));" style="dotted" arrowhead="empty"]
28 -> 30 [label="__VERIFIER_assert(0 == (x % 2));"]
30 -> 22 [label="default return"]
27 -> 29 [label="x = f(x);" style="dotted" arrowhead="empty"]
27 -> 29 [label="x = f(x);"]
29 -> 26 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 43 [label="__assert_fail(\"0\", \"loop3.c\", 10, \"reach_error\");"]}
28 -> 11 [label="__VERIFIER_assert(0 == (x % 2))"]
10 -> 30 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(0 == (x % 2));"]
15 -> 1 [label="reach_error()"]
27 -> 19 [label="f(x)"]
18 -> 29 [label="Return edge from f to main: x = f(x);"]}