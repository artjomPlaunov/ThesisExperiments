digraph CFA {
15 [shape="circle" label="N15\n26"]
35 [shape="circle" label="N35\n25"]
36 [shape="circle" label="N36\n24"]
37 [shape="circle" label="N37\n23"]
38 [shape="circle" label="N38\n22"]
39 [shape="circle" label="N39\n21"]
40 [shape="circle" label="N40\n20"]
41 [shape="circle" label="N41\n19"]
42 [shape="circle" label="N42\n18"]
43 [shape="circle" label="N43\n17"]
16 [shape="circle" label="N16\n16"]
17 [shape="circle" label="N17\n15"]
18 [shape="circle" label="N18\n14"]
19 [shape="circle" label="N19\n13"]
20 [shape="diamond" label="N20\n12"]
22 [shape="circle" label="N22\n10"]
14 [shape="circle" label="N14\n0"]
23 [shape="diamond" label="N23\n11"]
21 [shape="circle" label="N21\n9"]
25 [shape="doublecircle" label="N25\n8"]
27 [shape="circle" label="N27\n2"]
9 [shape="circle" label="N9\n5"]
10 [shape="diamond" label="N10\n4"]
11 [shape="circle" label="N11\n1"]
8 [shape="circle" label="N8\n0"]
33 [shape="circle" label="N33\n1"]
12 [shape="circle" label="N12\n3"]
1 [shape="circle" label="N1\n6"]
2 [shape="circle" label="N2\n5"]
3 [shape="circle" label="N3\n4"]
6 [shape="circle" label="N6\n3"]
44 [shape="circle" label="N44\n0"]
13 [shape="circle" label="N13\n2"]
26 [shape="circle" label="N26\n7"]
28 [shape="circle" label="N28\n6"]
29 [shape="diamond" label="N29\n5"]
30 [shape="circle" label="N30\n4"]
31 [shape="circle" label="N31\n3"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
9 -> 10 [label="Function start dummy edge"]
10 -> 12 [label="[cond == 0]"]
10 -> 11 [label="[!(cond == 0)]"]
11 -> 8 [label="default return"]
12 -> 13 [label="reach_error();" style="dotted" arrowhead="empty"]
12 -> 13 [label="reach_error();"]
13 -> 11 [label=""]}
subgraph cluster_main {
label="main()"
15 -> 35 [label="INIT GLOBAL VARS"]
35 -> 36 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
36 -> 37 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
37 -> 38 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
38 -> 39 [label="void reach_error();"]
39 -> 40 [label="int __VERIFIER_nondet_int();"]
40 -> 41 [label="_Bool __VERIFIER_nondet_bool();"]
41 -> 42 [label="void __VERIFIER_assert(int cond);"]
42 -> 43 [label="int main();"]
43 -> 16 [label="Function start dummy edge"]
16 -> 17 [label="int i;"]
17 -> 18 [label="i = __VERIFIER_nondet_int();"]
18 -> 19 [label="int c;"]
19 -> 20 [label="c = __VERIFIER_nondet_int();"]
20 -> 23 [label="[c == 0]"]
20 -> 22 [label="[!(c == 0)]"]
22 -> 14 [label="return 0;"]
23 -> 21 [label="[i == 0]"]
23 -> 22 [label="[!(i == 0)]"]
21 -> 25 [label="while"]
25 -> 26 [label="[i < 100]"]
25 -> 27 [label="[!(i < 100)]"]
27 -> 33 [label="__VERIFIER_assert(c >= 0);" style="dotted" arrowhead="empty"]
27 -> 33 [label="__VERIFIER_assert(c >= 0);"]
33 -> 14 [label="return 0;"]
26 -> 28 [label="c = c + i;"]
28 -> 29 [label="i = i + 1;"]
29 -> 31 [label="[i <= 0]"]
29 -> 30 [label="[!(i <= 0)]"]
30 -> 25 [label=""]
31 -> 27 [label="break"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="4UL;"]
3 -> 6 [label=""]
6 -> 44 [label="__assert_fail(\"0\", \"benchmark10_conjunctive.c\", 2, \"__PRETTY_FUNCTION__\");"]}
27 -> 9 [label="__VERIFIER_assert(c >= 0)"]
8 -> 33 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(c >= 0);"]
12 -> 1 [label="reach_error()"]}