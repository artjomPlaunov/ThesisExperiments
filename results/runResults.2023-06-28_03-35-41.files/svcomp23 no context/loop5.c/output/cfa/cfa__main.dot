digraph main {
24 [shape="circle" label="N24\n18"]
32 [shape="circle" label="N32\n17"]
27 [shape="doublecircle" label="N27\n5"]
28 [shape="circle" label="N28\n1"]
29 [shape="circle" label="N29\n4"]
31 [shape="circle" label="N31\n3"]
23 [shape="circle" label="N23\n2"]
32 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">32</td><td align="left">void abort();</td></tr><tr><td align="right">33</td><td align="left">void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">34</td><td align="left">void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">35</td><td align="left">void __assert(const char *__assertion, const char *__file, int __line);</td></tr><tr><td align="right">36</td><td align="left">void reach_error();</td></tr><tr><td align="right">37</td><td align="left">void assume_abort_if_not(int cond);</td></tr><tr><td align="right">38</td><td align="left">void __VERIFIER_assert(int cond);</td></tr><tr><td align="right">39</td><td align="left">int __VERIFIER_nondet_int();</td></tr><tr><td align="right">40</td><td align="left">int main();</td></tr><tr><td align="right">41</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">25</td><td align="left">unsigned int x = 10;</td></tr><tr><td align="right">26</td><td align="left">while</td></tr></table>>]
32 -> 27[label=""]
28 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">28</td><td align="left">x = x + 2;</td></tr><tr><td align="right">30</td><td align="left"></td></tr></table>>]
28 -> 27[label=""]
24 -> 32 [label="INIT GLOBAL VARS" fontname="Courier New"]
27 -> 28 [label="[x >= 10]" fontname="Courier New"]
27 -> 29 [label="[!(x >= 10)]" fontname="Courier New"]
100001 [shape="component" label="__VERIFIER_assert"]
29 -> 100001 [label="__VERIFIER_assert(0 == (x % 2));" fontname="Courier New"]
100001 -> 31 [label="" fontname="Courier New"]
29 -> 31 [label="__VERIFIER_assert(0 == (x % 2));" fontname="Courier New"]
31 -> 23 [label="default return" fontname="Courier New"]
}