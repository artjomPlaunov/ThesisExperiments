digraph CFA {
24 [shape="circle" label="N24\n18"]
32 [shape="circle" label="N32\n17"]
33 [shape="circle" label="N33\n16"]
34 [shape="circle" label="N34\n15"]
35 [shape="circle" label="N35\n14"]
36 [shape="circle" label="N36\n13"]
37 [shape="circle" label="N37\n12"]
38 [shape="circle" label="N38\n11"]
39 [shape="circle" label="N39\n10"]
40 [shape="circle" label="N40\n9"]
41 [shape="circle" label="N41\n8"]
25 [shape="circle" label="N25\n7"]
26 [shape="circle" label="N26\n6"]
27 [shape="doublecircle" label="N27\n5"]
29 [shape="circle" label="N29\n4"]
15 [shape="circle" label="N15\n7"]
16 [shape="diamond" label="N16\n6"]
17 [shape="circle" label="N17\n1"]
14 [shape="circle" label="N14\n0"]
31 [shape="circle" label="N31\n3"]
23 [shape="circle" label="N23\n2"]
18 [shape="circle" label="N18\n5"]
19 [shape="circle" label="N19\n4"]
1 [shape="circle" label="N1\n6"]
2 [shape="circle" label="N2\n5"]
3 [shape="circle" label="N3\n4"]
6 [shape="circle" label="N6\n3"]
44 [shape="circle" label="N44\n0"]
20 [shape="circle" label="N20\n3"]
42 [shape="circle" label="N42\n0"]
28 [shape="circle" label="N28\n1"]
30 [shape="circle" label="N30\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
15 -> 16 [label="Function start dummy edge"]
16 -> 18 [label="[cond == 0]"]
16 -> 17 [label="[!(cond == 0)]"]
17 -> 14 [label="return;"]
18 -> 19 [label="Label: ERROR"]
19 -> 20 [label="reach_error();" style="dotted" arrowhead="empty"]
19 -> 20 [label="reach_error();"]
20 -> 42 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
24 -> 32 [label="INIT GLOBAL VARS"]
32 -> 33 [label="void abort();"]
33 -> 34 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
34 -> 35 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
35 -> 36 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
36 -> 37 [label="void reach_error();"]
37 -> 38 [label="void assume_abort_if_not(int cond);"]
38 -> 39 [label="void __VERIFIER_assert(int cond);"]
39 -> 40 [label="int __VERIFIER_nondet_int();"]
40 -> 41 [label="int main();"]
41 -> 25 [label="Function start dummy edge"]
25 -> 26 [label="unsigned int x = 10;"]
26 -> 27 [label="while"]
27 -> 28 [label="[x >= 10]"]
27 -> 29 [label="[!(x >= 10)]"]
29 -> 31 [label="__VERIFIER_assert(0 == (x % 2));" style="dotted" arrowhead="empty"]
29 -> 31 [label="__VERIFIER_assert(0 == (x % 2));"]
31 -> 23 [label="default return"]
28 -> 30 [label="x = x + 2;"]
30 -> 27 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="4UL;"]
3 -> 6 [label=""]
6 -> 44 [label="__assert_fail(\"0\", \"assert.h\", 3, \"__PRETTY_FUNCTION__\");"]}
29 -> 15 [label="__VERIFIER_assert(0 == (x % 2))"]
14 -> 31 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(0 == (x % 2));"]
19 -> 1 [label="reach_error()"]}