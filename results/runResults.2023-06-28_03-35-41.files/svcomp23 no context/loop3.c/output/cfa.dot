digraph CFA {
17 [shape="circle" label="N17\n15"]
25 [shape="circle" label="N25\n14"]
26 [shape="circle" label="N26\n13"]
27 [shape="circle" label="N27\n12"]
28 [shape="circle" label="N28\n11"]
29 [shape="circle" label="N29\n10"]
30 [shape="circle" label="N30\n9"]
31 [shape="circle" label="N31\n8"]
18 [shape="circle" label="N18\n7"]
19 [shape="circle" label="N19\n6"]
20 [shape="doublecircle" label="N20\n5"]
22 [shape="circle" label="N22\n4"]
5 [shape="circle" label="N5\n7"]
6 [shape="diamond" label="N6\n6"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
24 [shape="circle" label="N24\n3"]
16 [shape="circle" label="N16\n2"]
8 [shape="circle" label="N8\n5"]
9 [shape="circle" label="N9\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
10 [shape="circle" label="N10\n3"]
32 [shape="circle" label="N32\n0"]
21 [shape="circle" label="N21\n1"]
13 [shape="circle" label="N13\n2"]
14 [shape="circle" label="N14\n1"]
12 [shape="circle" label="N12\n0"]
23 [shape="circle" label="N23\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="default return"]
8 -> 9 [label="Label: ERROR"]
9 -> 10 [label="reach_error();" style="dotted" arrowhead="empty"]
9 -> 10 [label="reach_error();"]
10 -> 32 [label="abort();"]}
subgraph cluster_f {
label="f()"
13 -> 14 [label="Function start dummy edge"]
14 -> 12 [label="return z + 2;"]}
subgraph cluster_main {
label="main()"
17 -> 25 [label="INIT GLOBAL VARS"]
25 -> 26 [label="void abort();"]
26 -> 27 [label="void assert_fail(const char *, const char *, unsigned int, const char *);"]
27 -> 28 [label="void reach_error();"]
28 -> 29 [label="void __VERIFIER_assert(int cond);"]
29 -> 30 [label="unsigned int f(unsigned int z);"]
30 -> 31 [label="int main();"]
31 -> 18 [label="Function start dummy edge"]
18 -> 19 [label="unsigned int x = 0;"]
19 -> 20 [label="while"]
20 -> 21 [label="[x < 268435455]"]
20 -> 22 [label="[!(x < 268435455)]"]
22 -> 24 [label="__VERIFIER_assert(0 == (x % 2));" style="dotted" arrowhead="empty"]
22 -> 24 [label="__VERIFIER_assert(0 == (x % 2));"]
24 -> 16 [label="default return"]
21 -> 23 [label="x = f(x);" style="dotted" arrowhead="empty"]
21 -> 23 [label="x = f(x);"]
23 -> 20 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="__assert_fail(\"0\", \"mono-crafted_1.c\", 3, \"reach_error\");"]
3 -> 0 [label="default return"]}
22 -> 5 [label="__VERIFIER_assert(0 == (x % 2))"]
4 -> 24 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(0 == (x % 2));"]
9 -> 1 [label="reach_error()"]
0 -> 10 [label="Return edge from reach_error to __VERIFIER_assert: reach_error();"]
21 -> 13 [label="f(x)"]
12 -> 23 [label="Return edge from f to main: x = f(x);"]}