digraph CFA {
20 [shape="circle" label="N20\n41"]
49 [shape="circle" label="N49\n40"]
50 [shape="circle" label="N50\n39"]
51 [shape="circle" label="N51\n38"]
52 [shape="circle" label="N52\n37"]
53 [shape="circle" label="N53\n36"]
54 [shape="circle" label="N54\n35"]
55 [shape="circle" label="N55\n34"]
56 [shape="circle" label="N56\n33"]
57 [shape="circle" label="N57\n32"]
58 [shape="circle" label="N58\n31"]
59 [shape="circle" label="N59\n30"]
60 [shape="circle" label="N60\n29"]
61 [shape="circle" label="N61\n28"]
21 [shape="circle" label="N21\n27"]
22 [shape="circle" label="N22\n26"]
23 [shape="diamond" label="N23\n25"]
64 [shape="circle" label="N64\n0"]
24 [shape="diamond" label="N24\n24"]
65 [shape="circle" label="N65\n0"]
25 [shape="circle" label="N25\n23"]
26 [shape="circle" label="N26\n22"]
27 [shape="circle" label="N27\n21"]
28 [shape="doublecircle" label="N28\n20"]
29 [shape="diamond" label="N29\n19"]
33 [shape="circle" label="N33\n18"]
30 [shape="circle" label="N30\n17"]
43 [shape="diamond" label="N43\n16"]
46 [shape="circle" label="N46\n14"]
47 [shape="circle" label="N47\n12"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
48 [shape="circle" label="N48\n11"]
19 [shape="circle" label="N19\n10"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
66 [shape="circle" label="N66\n0"]
16 [shape="circle" label="N16\n3"]
62 [shape="circle" label="N62\n0"]
44 [shape="diamond" label="N44\n15"]
45 [shape="circle" label="N45\n13"]
32 [shape="circle" label="N32\n9"]
31 [shape="diamond" label="N31\n8"]
36 [shape="circle" label="N36\n7"]
38 [shape="circle" label="N38\n6"]
35 [shape="circle" label="N35\n3"]
40 [shape="circle" label="N40\n2"]
41 [shape="circle" label="N41\n1"]
42 [shape="circle" label="N42\n0"]
37 [shape="circle" label="N37\n5"]
39 [shape="circle" label="N39\n4"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="return;"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 62 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
20 -> 49 [label="INIT GLOBAL VARS"]
49 -> 50 [label="void __VERIFIER_assume(int);"]
50 -> 51 [label="void abort();"]
51 -> 52 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
52 -> 53 [label="void reach_error();"]
53 -> 54 [label="void assume_abort_if_not(int cond);"]
54 -> 55 [label="void __VERIFIER_assert(int cond);"]
55 -> 56 [label="unsigned int __VERIFIER_nondet_int();"]
56 -> 57 [label="int flag = 0;"]
57 -> 58 [label="int i = 0;"]
58 -> 59 [label="int n = 0;"]
59 -> 60 [label="int p = 0;"]
60 -> 61 [label="void main();"]
61 -> 21 [label="Function start dummy edge"]
21 -> 22 [label="p = 0;"]
22 -> 23 [label="n = __VERIFIER_nondet_int();"]
23 -> 24 [label="[n >= 100]"]
23 -> 64 [label="[!(n >= 100)]"]
24 -> 25 [label="[n <= 1000]"]
24 -> 65 [label="[!(n <= 1000)]"]
25 -> 26 [label="flag = __VERIFIER_nondet_int();"]
26 -> 27 [label="i = 0;"]
27 -> 28 [label="while"]
28 -> 29 [label=""]
29 -> 32 [label="[i < n]"]
29 -> 33 [label="[!(i < n)]"]
33 -> 30 [label="break"]
30 -> 43 [label="int __CPAchecker_TMP_1;"]
43 -> 44 [label="[p >= 1600]"]
43 -> 46 [label="[!(p >= 1600)]"]
46 -> 47 [label="__CPAchecker_TMP_1 = 0;"]
47 -> 48 [label="__VERIFIER_assert(__CPAchecker_TMP_1);" style="dotted" arrowhead="empty"]
47 -> 48 [label="__VERIFIER_assert(__CPAchecker_TMP_1);"]
48 -> 19 [label="default return"]
44 -> 45 [label="[p <= 32000]"]
44 -> 46 [label="[!(p <= 32000)]"]
45 -> 47 [label="__CPAchecker_TMP_1 = 1;"]
32 -> 31 [label=""]
31 -> 37 [label="[flag == 0]"]
31 -> 36 [label="[!(flag == 0)]"]
36 -> 38 [label="p = p + 16;"]
38 -> 35 [label=""]
35 -> 40 [label="int __CPAchecker_TMP_0 = i;"]
40 -> 41 [label="i = i + 1;"]
41 -> 42 [label="__CPAchecker_TMP_0;"]
42 -> 28 [label=""]
37 -> 39 [label="p = p + 32;"]
39 -> 35 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 66 [label="__assert_fail(\"0\", \"sumt3.c\", 3, \"reach_error\");"]}
47 -> 11 [label="__VERIFIER_assert(__CPAchecker_TMP_1)"]
10 -> 48 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_1);"]
15 -> 1 [label="reach_error()"]}