digraph main {
24 [shape="circle" label="N24\n34"]
50 [shape="circle" label="N50\n33"]
30 [shape="doublecircle" label="N30\n18"]
31 [shape="diamond" label="N31\n17"]
34 [shape="circle" label="N34\n12"]
35 [shape="circle" label="N35\n16"]
33 [shape="diamond" label="N33\n8"]
43 [shape="circle" label="N43\n3"]
42 [shape="circle" label="N42\n7"]
32 [shape="circle" label="N32\n2"]
48 [shape="circle" label="N48\n1"]
23 [shape="circle" label="N23\n0"]
50 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">50</td><td align="left">void abort();</td></tr><tr><td align="right">51</td><td align="left">void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">52</td><td align="left">void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">53</td><td align="left">void __assert(const char *__assertion, const char *__file, int __line);</td></tr><tr><td align="right">54</td><td align="left">void reach_error();</td></tr><tr><td align="right">55</td><td align="left">void assume_abort_if_not(int cond);</td></tr><tr><td align="right">56</td><td align="left">void __VERIFIER_assert(int cond);</td></tr><tr><td align="right">57</td><td align="left">int __VERIFIER_nondet_int();</td></tr><tr><td align="right">58</td><td align="left">int main();</td></tr><tr><td align="right">59</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">25</td><td align="left">int x;</td></tr><tr><td align="right">26</td><td align="left">int y;</td></tr><tr><td align="right">27</td><td align="left">x = 0;</td></tr><tr><td align="right">28</td><td align="left">y = 0;</td></tr><tr><td align="right">29</td><td align="left">while</td></tr></table>>]
50 -> 30[label=""]
35 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">35</td><td align="left">int __CPAchecker_TMP_1 = y;</td></tr><tr><td align="right">39</td><td align="left">y = y - 1;</td></tr><tr><td align="right">40</td><td align="left">__CPAchecker_TMP_1;</td></tr><tr><td align="right">41</td><td align="left"></td></tr></table>>]
35 -> 33[label=""]
42 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">42</td><td align="left">int __CPAchecker_TMP_2 = x;</td></tr><tr><td align="right">45</td><td align="left">x = x + 1;</td></tr><tr><td align="right">46</td><td align="left">__CPAchecker_TMP_2;</td></tr><tr><td align="right">47</td><td align="left"></td></tr></table>>]
42 -> 30[label=""]
34 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">34</td><td align="left">int __CPAchecker_TMP_0 = y;</td></tr><tr><td align="right">36</td><td align="left">y = y + 1;</td></tr><tr><td align="right">37</td><td align="left">__CPAchecker_TMP_0;</td></tr><tr><td align="right">38</td><td align="left"></td></tr></table>>]
34 -> 33[label=""]
24 -> 50 [label="INIT GLOBAL VARS" fontname="Courier New"]
30 -> 31 [label="" fontname="Courier New"]
31 -> 34 [label="[x < 50]" fontname="Courier New"]
31 -> 35 [label="[!(x < 50)]" fontname="Courier New"]
33 -> 43 [label="[y < 0]" fontname="Courier New"]
33 -> 42 [label="[!(y < 0)]" fontname="Courier New"]
43 -> 32 [label="break" fontname="Courier New"]
100001 [shape="component" label="__VERIFIER_assert"]
32 -> 100001 [label="__VERIFIER_assert(x == 100);" fontname="Courier New"]
100001 -> 48 [label="" fontname="Courier New"]
32 -> 48 [label="__VERIFIER_assert(x == 100);" fontname="Courier New"]
48 -> 23 [label="return 0;" fontname="Courier New"]
}