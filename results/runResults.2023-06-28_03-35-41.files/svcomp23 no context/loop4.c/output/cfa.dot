digraph CFA {
24 [shape="circle" label="N24\n34"]
50 [shape="circle" label="N50\n33"]
51 [shape="circle" label="N51\n32"]
52 [shape="circle" label="N52\n31"]
53 [shape="circle" label="N53\n30"]
54 [shape="circle" label="N54\n29"]
55 [shape="circle" label="N55\n28"]
56 [shape="circle" label="N56\n27"]
57 [shape="circle" label="N57\n26"]
58 [shape="circle" label="N58\n25"]
59 [shape="circle" label="N59\n24"]
25 [shape="circle" label="N25\n23"]
26 [shape="circle" label="N26\n22"]
27 [shape="circle" label="N27\n21"]
28 [shape="circle" label="N28\n20"]
29 [shape="circle" label="N29\n19"]
30 [shape="doublecircle" label="N30\n18"]
31 [shape="diamond" label="N31\n17"]
35 [shape="circle" label="N35\n16"]
39 [shape="circle" label="N39\n15"]
40 [shape="circle" label="N40\n14"]
41 [shape="circle" label="N41\n13"]
33 [shape="diamond" label="N33\n8"]
42 [shape="circle" label="N42\n7"]
45 [shape="circle" label="N45\n6"]
46 [shape="circle" label="N46\n5"]
47 [shape="circle" label="N47\n4"]
43 [shape="circle" label="N43\n3"]
32 [shape="circle" label="N32\n2"]
15 [shape="circle" label="N15\n7"]
16 [shape="diamond" label="N16\n6"]
17 [shape="circle" label="N17\n1"]
14 [shape="circle" label="N14\n0"]
48 [shape="circle" label="N48\n1"]
23 [shape="circle" label="N23\n0"]
18 [shape="circle" label="N18\n5"]
19 [shape="circle" label="N19\n4"]
1 [shape="circle" label="N1\n6"]
2 [shape="circle" label="N2\n5"]
3 [shape="circle" label="N3\n4"]
6 [shape="circle" label="N6\n3"]
62 [shape="circle" label="N62\n0"]
20 [shape="circle" label="N20\n3"]
60 [shape="circle" label="N60\n0"]
34 [shape="circle" label="N34\n12"]
36 [shape="circle" label="N36\n11"]
37 [shape="circle" label="N37\n10"]
38 [shape="circle" label="N38\n9"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
15 -> 16 [label="Function start dummy edge"]
16 -> 18 [label="[cond == 0]"]
16 -> 17 [label="[!(cond == 0)]"]
17 -> 14 [label="return;"]
18 -> 19 [label="Label: ERROR"]
19 -> 20 [label="reach_error();" style="dotted" arrowhead="empty"]
19 -> 20 [label="reach_error();"]
20 -> 60 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
24 -> 50 [label="INIT GLOBAL VARS"]
50 -> 51 [label="void abort();"]
51 -> 52 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
52 -> 53 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
53 -> 54 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
54 -> 55 [label="void reach_error();"]
55 -> 56 [label="void assume_abort_if_not(int cond);"]
56 -> 57 [label="void __VERIFIER_assert(int cond);"]
57 -> 58 [label="int __VERIFIER_nondet_int();"]
58 -> 59 [label="int main();"]
59 -> 25 [label="Function start dummy edge"]
25 -> 26 [label="int x;"]
26 -> 27 [label="int y;"]
27 -> 28 [label="x = 0;"]
28 -> 29 [label="y = 0;"]
29 -> 30 [label="while"]
30 -> 31 [label=""]
31 -> 34 [label="[x < 50]"]
31 -> 35 [label="[!(x < 50)]"]
35 -> 39 [label="int __CPAchecker_TMP_1 = y;"]
39 -> 40 [label="y = y - 1;"]
40 -> 41 [label="__CPAchecker_TMP_1;"]
41 -> 33 [label=""]
33 -> 43 [label="[y < 0]"]
33 -> 42 [label="[!(y < 0)]"]
42 -> 45 [label="int __CPAchecker_TMP_2 = x;"]
45 -> 46 [label="x = x + 1;"]
46 -> 47 [label="__CPAchecker_TMP_2;"]
47 -> 30 [label=""]
43 -> 32 [label="break"]
32 -> 48 [label="__VERIFIER_assert(x == 100);" style="dotted" arrowhead="empty"]
32 -> 48 [label="__VERIFIER_assert(x == 100);"]
48 -> 23 [label="return 0;"]
34 -> 36 [label="int __CPAchecker_TMP_0 = y;"]
36 -> 37 [label="y = y + 1;"]
37 -> 38 [label="__CPAchecker_TMP_0;"]
38 -> 33 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="4UL;"]
3 -> 6 [label=""]
6 -> 62 [label="__assert_fail(\"0\", \"assert.h\", 3, \"__PRETTY_FUNCTION__\");"]}
32 -> 15 [label="__VERIFIER_assert(x == 100)"]
14 -> 48 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(x == 100);"]
19 -> 1 [label="reach_error()"]}