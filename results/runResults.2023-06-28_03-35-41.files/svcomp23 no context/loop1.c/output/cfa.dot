digraph CFA {
14 [shape="circle" label="N14\n25"]
34 [shape="circle" label="N34\n24"]
35 [shape="circle" label="N35\n23"]
36 [shape="circle" label="N36\n22"]
37 [shape="circle" label="N37\n21"]
38 [shape="circle" label="N38\n20"]
15 [shape="circle" label="N15\n19"]
16 [shape="circle" label="N16\n18"]
17 [shape="circle" label="N17\n17"]
18 [shape="circle" label="N18\n16"]
19 [shape="doublecircle" label="N19\n15"]
22 [shape="circle" label="N22\n14"]
24 [shape="circle" label="N24\n13"]
25 [shape="doublecircle" label="N25\n12"]
28 [shape="circle" label="N28\n11"]
13 [shape="circle" label="N13\n10"]
27 [shape="diamond" label="N27\n9"]
31 [shape="circle" label="N31\n8"]
5 [shape="circle" label="N5\n7"]
6 [shape="diamond" label="N6\n6"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
32 [shape="circle" label="N32\n5"]
29 [shape="circle" label="N29\n4"]
26 [shape="circle" label="N26\n3"]
33 [shape="circle" label="N33\n7"]
8 [shape="circle" label="N8\n5"]
9 [shape="circle" label="N9\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
10 [shape="circle" label="N10\n3"]
39 [shape="circle" label="N39\n0"]
30 [shape="circle" label="N30\n6"]
21 [shape="circle" label="N21\n2"]
23 [shape="circle" label="N23\n1"]
20 [shape="circle" label="N20\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="return;"]
8 -> 9 [label="Label: ERROR"]
9 -> 10 [label="reach_error();" style="dotted" arrowhead="empty"]
9 -> 10 [label="reach_error();"]
10 -> 39 [label="abort();"]}
subgraph cluster_main {
label="main()"
14 -> 34 [label="INIT GLOBAL VARS"]
34 -> 35 [label="void abort();"]
35 -> 36 [label="void reach_error();"]
36 -> 37 [label="void __VERIFIER_assert(int cond);"]
37 -> 38 [label="int main();"]
38 -> 15 [label="Function start dummy edge"]
15 -> 16 [label="unsigned int array[1000];"]
16 -> 17 [label="unsigned int index;"]
17 -> 18 [label="for"]
18 -> 19 [label="index = 0;"]
19 -> 21 [label="[index < 1000]"]
19 -> 22 [label="[!(index < 1000)]"]
22 -> 24 [label="for"]
24 -> 25 [label="index = 0;"]
25 -> 27 [label="[index < 1000]"]
25 -> 28 [label="[!(index < 1000)]"]
28 -> 13 [label="default return"]
27 -> 30 [label="[(index % 2) == 0]"]
27 -> 31 [label="[!((index % 2) == 0)]"]
31 -> 33 [label="__VERIFIER_assert((array[index]) != 0);" style="dotted" arrowhead="empty"]
31 -> 33 [label="__VERIFIER_assert((array[index]) != 0);"]
32 -> 29 [label=""]
29 -> 26 [label=""]
26 -> 25 [label="index = index + 1;"]
33 -> 29 [label=""]
30 -> 32 [label="__VERIFIER_assert((array[index]) == 0);" style="dotted" arrowhead="empty"]
30 -> 32 [label="__VERIFIER_assert((array[index]) == 0);"]
21 -> 23 [label="array[index] = index % 2;"]
23 -> 20 [label=""]
20 -> 19 [label="index = index + 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="assert(0);"]
3 -> 0 [label="default return"]}
31 -> 5 [label="__VERIFIER_assert((array[index]) != 0)"]
4 -> 33 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((array[index]) != 0);"]
4 -> 32 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((array[index]) == 0);"]
9 -> 1 [label="reach_error()"]
0 -> 10 [label="Return edge from reach_error to __VERIFIER_assert: reach_error();"]
30 -> 5 [label="__VERIFIER_assert((array[index]) == 0)"]}