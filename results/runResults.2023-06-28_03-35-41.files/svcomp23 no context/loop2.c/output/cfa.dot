digraph CFA {
14 [shape="circle" label="N14\n29"]
37 [shape="circle" label="N37\n28"]
38 [shape="circle" label="N38\n27"]
39 [shape="circle" label="N39\n26"]
40 [shape="circle" label="N40\n25"]
41 [shape="circle" label="N41\n24"]
42 [shape="circle" label="N42\n23"]
15 [shape="circle" label="N15\n22"]
16 [shape="circle" label="N16\n21"]
17 [shape="circle" label="N17\n20"]
18 [shape="circle" label="N18\n19"]
19 [shape="circle" label="N19\n18"]
20 [shape="doublecircle" label="N20\n17"]
23 [shape="circle" label="N23\n16"]
25 [shape="circle" label="N25\n15"]
26 [shape="doublecircle" label="N26\n14"]
29 [shape="circle" label="N29\n13"]
13 [shape="circle" label="N13\n12"]
28 [shape="diamond" label="N28\n11"]
32 [shape="circle" label="N32\n10"]
5 [shape="circle" label="N5\n7"]
6 [shape="diamond" label="N6\n6"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
36 [shape="circle" label="N36\n7"]
30 [shape="circle" label="N30\n4"]
27 [shape="circle" label="N27\n3"]
34 [shape="circle" label="N34\n9"]
35 [shape="circle" label="N35\n8"]
8 [shape="circle" label="N8\n5"]
9 [shape="circle" label="N9\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
10 [shape="circle" label="N10\n3"]
43 [shape="circle" label="N43\n0"]
31 [shape="circle" label="N31\n6"]
33 [shape="circle" label="N33\n5"]
22 [shape="circle" label="N22\n2"]
24 [shape="circle" label="N24\n1"]
21 [shape="circle" label="N21\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="return;"]
8 -> 9 [label="Label: ERROR"]
9 -> 10 [label="reach_error();" style="dotted" arrowhead="empty"]
9 -> 10 [label="reach_error();"]
10 -> 43 [label="abort();"]}
subgraph cluster_main {
label="main()"
14 -> 37 [label="INIT GLOBAL VARS"]
37 -> 38 [label="void abort();"]
38 -> 39 [label="void __VERIFIER_assume(int);"]
39 -> 40 [label="void reach_error();"]
40 -> 41 [label="void __VERIFIER_assert(int cond);"]
41 -> 42 [label="int main();"]
42 -> 15 [label="Function start dummy edge"]
15 -> 16 [label="unsigned int array[1000];"]
16 -> 17 [label="unsigned int index;"]
17 -> 18 [label="unsigned int flag;"]
18 -> 19 [label="for"]
19 -> 20 [label="index = 0;"]
20 -> 22 [label="[index < 1000]"]
20 -> 23 [label="[!(index < 1000)]"]
23 -> 25 [label="for"]
25 -> 26 [label="index = 0;"]
26 -> 28 [label="[index < 1000]"]
26 -> 29 [label="[!(index < 1000)]"]
29 -> 13 [label="default return"]
28 -> 31 [label="[(index % 2) == 0]"]
28 -> 32 [label="[!((index % 2) == 0)]"]
32 -> 34 [label="__VERIFIER_assert(flag == 0);" style="dotted" arrowhead="empty"]
32 -> 34 [label="__VERIFIER_assert(flag == 0);"]
36 -> 30 [label=""]
30 -> 27 [label=""]
27 -> 26 [label="index = index + 1;"]
34 -> 35 [label="flag = array[index];"]
35 -> 36 [label="__VERIFIER_assert(flag == 1);" style="dotted" arrowhead="empty"]
35 -> 36 [label="__VERIFIER_assert(flag == 1);"]
31 -> 33 [label="flag = array[index];"]
33 -> 30 [label=""]
22 -> 24 [label="array[index] = index % 2;"]
24 -> 21 [label=""]
21 -> 20 [label="index = index + 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="assert(0);"]
3 -> 0 [label="default return"]}
32 -> 5 [label="__VERIFIER_assert(flag == 0)"]
4 -> 34 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(flag == 0);"]
4 -> 36 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(flag == 1);"]
35 -> 5 [label="__VERIFIER_assert(flag == 1)"]
9 -> 1 [label="reach_error()"]
0 -> 10 [label="Return edge from reach_error to __VERIFIER_assert: reach_error();"]}