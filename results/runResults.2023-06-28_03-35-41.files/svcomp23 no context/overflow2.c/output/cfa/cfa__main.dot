digraph main {
19 [shape="circle" label="N19\n24"]
36 [shape="circle" label="N36\n23"]
25 [shape="doublecircle" label="N25\n10"]
28 [shape="diamond" label="N28\n9"]
27 [shape="circle" label="N27\n8"]
18 [shape="circle" label="N18\n7"]
26 [shape="circle" label="N26\n6"]
29 [shape="doublecircle" label="N29\n5"]
30 [shape="circle" label="N30\n3"]
31 [shape="circle" label="N31\n4"]
32 [shape="circle" label="N32\n2"]
33 [shape="circle" label="N33\n1"]
36 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">36</td><td align="left">void abort();</td></tr><tr><td align="right">37</td><td align="left">void __assert_fail(const char *, const char *, unsigned int, const char *);</td></tr><tr><td align="right">38</td><td align="left">void reach_error();</td></tr><tr><td align="right">39</td><td align="left">void assume_abort_if_not(int cond);</td></tr><tr><td align="right">40</td><td align="left">void __VERIFIER_assert(int cond);</td></tr><tr><td align="right">41</td><td align="left">int __VERIFIER_nondet_int();</td></tr><tr><td align="right">42</td><td align="left">int main();</td></tr><tr><td align="right">43</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">20</td><td align="left">int x;</td></tr><tr><td align="right">21</td><td align="left">int y;</td></tr><tr><td align="right">22</td><td align="left">x = __VERIFIER_nondet_int();</td></tr><tr><td align="right">23</td><td align="left">y = __VERIFIER_nondet_int();</td></tr><tr><td align="right">24</td><td align="left">while</td></tr></table>>]
36 -> 25[label=""]
33 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">33</td><td align="left">y = y - 1;</td></tr><tr><td align="right">34</td><td align="left"></td></tr></table>>]
33 -> 29[label=""]
19 -> 36 [label="INIT GLOBAL VARS" fontname="Courier New"]
25 -> 28 [label="[x == y]" fontname="Courier New"]
25 -> 27 [label="[!(x == y)]" fontname="Courier New"]
27 -> 18 [label="return 0;" fontname="Courier New"]
28 -> 26 [label="[x > 0]" fontname="Courier New"]
28 -> 27 [label="[!(x > 0)]" fontname="Courier New"]
29 -> 30 [label="[y > 0]" fontname="Courier New"]
29 -> 31 [label="[!(y > 0)]" fontname="Courier New"]
100001 [shape="component" label="__VERIFIER_assert"]
30 -> 100001 [label="__VERIFIER_assert(-2147483648LL <= (x - 1));" fontname="Courier New"]
100001 -> 32 [label="" fontname="Courier New"]
30 -> 32 [label="__VERIFIER_assert(-2147483648LL <= (x - 1));" fontname="Courier New"]
32 -> 33 [label="x = x - 1;" fontname="Courier New"]
26 -> 29 [label="while" fontname="Courier New"]
31 -> 25 [label="" fontname="Courier New"]
}