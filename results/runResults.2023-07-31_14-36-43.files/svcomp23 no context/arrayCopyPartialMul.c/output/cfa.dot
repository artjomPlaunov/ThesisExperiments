digraph CFA {
19 [shape="circle" label="N19\n49"]
60 [shape="circle" label="N60\n48"]
61 [shape="circle" label="N61\n47"]
62 [shape="circle" label="N62\n46"]
63 [shape="circle" label="N63\n45"]
64 [shape="circle" label="N64\n44"]
65 [shape="circle" label="N65\n43"]
66 [shape="circle" label="N66\n42"]
67 [shape="circle" label="N67\n41"]
68 [shape="circle" label="N68\n40"]
20 [shape="circle" label="N20\n39"]
21 [shape="circle" label="N21\n38"]
22 [shape="circle" label="N22\n37"]
23 [shape="circle" label="N23\n36"]
24 [shape="circle" label="N24\n35"]
25 [shape="circle" label="N25\n34"]
26 [shape="doublecircle" label="N26\n33"]
29 [shape="circle" label="N29\n32"]
44 [shape="circle" label="N44\n31"]
45 [shape="doublecircle" label="N45\n30"]
47 [shape="circle" label="N47\n29"]
50 [shape="circle" label="N50\n28"]
51 [shape="circle" label="N51\n27"]
52 [shape="doublecircle" label="N52\n26"]
55 [shape="circle" label="N55\n25"]
18 [shape="circle" label="N18\n24"]
54 [shape="diamond" label="N54\n23"]
56 [shape="circle" label="N56\n20"]
53 [shape="circle" label="N53\n19"]
57 [shape="circle" label="N57\n22"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
58 [shape="circle" label="N58\n21"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
71 [shape="circle" label="N71\n0"]
16 [shape="circle" label="N16\n3"]
69 [shape="circle" label="N69\n0"]
46 [shape="circle" label="N46\n18"]
48 [shape="circle" label="N48\n17"]
49 [shape="circle" label="N49\n16"]
28 [shape="circle" label="N28\n15"]
30 [shape="circle" label="N30\n14"]
31 [shape="diamond" label="N31\n13"]
34 [shape="circle" label="N34\n11"]
35 [shape="circle" label="N35\n9"]
5 [shape="circle" label="N5\n5"]
6 [shape="diamond" label="N6\n4"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
43 [shape="circle" label="N43\n1"]
27 [shape="circle" label="N27\n0"]
36 [shape="circle" label="N36\n8"]
37 [shape="circle" label="N37\n7"]
38 [shape="diamond" label="N38\n6"]
41 [shape="circle" label="N41\n4"]
42 [shape="circle" label="N42\n2"]
39 [shape="diamond" label="N39\n5"]
40 [shape="circle" label="N40\n3"]
8 [shape="circle" label="N8\n3"]
70 [shape="circle" label="N70\n0"]
32 [shape="diamond" label="N32\n12"]
33 [shape="circle" label="N33\n10"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="default return"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]
15 -> 16 [label="reach_error();"]
16 -> 69 [label="abort();"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="default return"]
8 -> 70 [label="abort();"]}
subgraph cluster_main {
label="main()"
19 -> 60 [label="INIT GLOBAL VARS"]
60 -> 61 [label="void abort();"]
61 -> 62 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
62 -> 63 [label="void reach_error();"]
63 -> 64 [label="void assume_abort_if_not(int cond);"]
64 -> 65 [label="void __VERIFIER_assert(int cond);"]
65 -> 66 [label="int __VERIFIER_nondet_int();"]
66 -> 67 [label="void __VERIFIER_assume(int);"]
67 -> 68 [label="int main();"]
68 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="int a[1000];"]
21 -> 22 [label="int b[1000];"]
22 -> 23 [label="int c[1000];"]
23 -> 24 [label="int i = 0;"]
24 -> 25 [label="for"]
25 -> 26 [label="i = 0;"]
26 -> 28 [label="[i < 1000]"]
26 -> 29 [label="[!(i < 1000)]"]
29 -> 44 [label="i = 0;"]
44 -> 45 [label="while"]
45 -> 46 [label="[i < 1000]"]
45 -> 47 [label="[!(i < 1000)]"]
47 -> 50 [label="int x;"]
50 -> 51 [label="for"]
51 -> 52 [label="x = 0;"]
52 -> 54 [label="[x < 1000]"]
52 -> 55 [label="[!(x < 1000)]"]
55 -> 18 [label="return 0;"]
54 -> 57 [label="[i < 500]"]
54 -> 56 [label="[!(i < 500)]"]
56 -> 53 [label=""]
53 -> 52 [label="x = x + 1;"]
57 -> 58 [label="__VERIFIER_assert((c[x]) >= 10000);" style="dotted" arrowhead="empty"]
57 -> 58 [label="__VERIFIER_assert((c[x]) >= 10000);"]
58 -> 56 [label=""]
46 -> 48 [label="c[i] = (a[i]) * (b[i]);"]
48 -> 49 [label="i = i + 1;"]
49 -> 45 [label=""]
28 -> 30 [label="a[i] = __VERIFIER_nondet_int();"]
30 -> 31 [label="int __CPAchecker_TMP_0;"]
31 -> 32 [label="[(a[i]) >= 100]"]
31 -> 34 [label="[!((a[i]) >= 100)]"]
34 -> 35 [label="__CPAchecker_TMP_0 = 0;"]
35 -> 36 [label="assume_abort_if_not(__CPAchecker_TMP_0);" style="dotted" arrowhead="empty"]
35 -> 36 [label="assume_abort_if_not(__CPAchecker_TMP_0);"]
43 -> 27 [label=""]
27 -> 26 [label="i = i + 1;"]
36 -> 37 [label="b[i] = __VERIFIER_nondet_int();"]
37 -> 38 [label="int __CPAchecker_TMP_1;"]
38 -> 39 [label="[(b[i]) >= 100]"]
38 -> 41 [label="[!((b[i]) >= 100)]"]
41 -> 42 [label="__CPAchecker_TMP_1 = 0;"]
42 -> 43 [label="assume_abort_if_not(__CPAchecker_TMP_1);" style="dotted" arrowhead="empty"]
42 -> 43 [label="assume_abort_if_not(__CPAchecker_TMP_1);"]
39 -> 40 [label="[(b[i]) <= 1000]"]
39 -> 41 [label="[!((b[i]) <= 1000)]"]
40 -> 42 [label="__CPAchecker_TMP_1 = 1;"]
32 -> 33 [label="[(a[i]) <= 1000]"]
32 -> 34 [label="[!((a[i]) <= 1000)]"]
33 -> 35 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 71 [label="__assert_fail(\"0\", \"overflow1.c\", 10, \"reach_error\");"]}
57 -> 11 [label="__VERIFIER_assert((c[x]) >= 10000)"]
10 -> 58 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((c[x]) >= 10000);"]
15 -> 1 [label="reach_error()"]
35 -> 5 [label="assume_abort_if_not(__CPAchecker_TMP_0)"]
4 -> 36 [label="Return edge from assume_abort_if_not to main: assume_abort_if_not(__CPAchecker_TMP_0);"]
4 -> 43 [label="Return edge from assume_abort_if_not to main: assume_abort_if_not(__CPAchecker_TMP_1);"]
42 -> 5 [label="assume_abort_if_not(__CPAchecker_TMP_1)"]}