digraph CFA {
14 [shape="circle" label="N14\n69"]
77 [shape="circle" label="N77\n68"]
78 [shape="circle" label="N78\n67"]
79 [shape="circle" label="N79\n66"]
80 [shape="circle" label="N80\n65"]
81 [shape="circle" label="N81\n64"]
82 [shape="circle" label="N82\n63"]
83 [shape="circle" label="N83\n62"]
15 [shape="circle" label="N15\n61"]
16 [shape="circle" label="N16\n60"]
17 [shape="circle" label="N17\n59"]
18 [shape="circle" label="N18\n58"]
19 [shape="circle" label="N19\n57"]
20 [shape="doublecircle" label="N20\n56"]
22 [shape="circle" label="N22\n55"]
29 [shape="circle" label="N29\n54"]
30 [shape="doublecircle" label="N30\n53"]
32 [shape="circle" label="N32\n52"]
39 [shape="doublecircle" label="N39\n51"]
41 [shape="circle" label="N41\n50"]
48 [shape="doublecircle" label="N48\n49"]
50 [shape="circle" label="N50\n48"]
57 [shape="doublecircle" label="N57\n47"]
59 [shape="circle" label="N59\n46"]
66 [shape="doublecircle" label="N66\n45"]
68 [shape="circle" label="N68\n44"]
5 [shape="circle" label="N5\n7"]
6 [shape="diamond" label="N6\n6"]
7 [shape="circle" label="N7\n1"]
4 [shape="circle" label="N4\n0"]
75 [shape="circle" label="N75\n43"]
13 [shape="circle" label="N13\n42"]
8 [shape="circle" label="N8\n5"]
9 [shape="circle" label="N9\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
85 [shape="circle" label="N85\n0"]
10 [shape="circle" label="N10\n3"]
84 [shape="circle" label="N84\n0"]
67 [shape="circle" label="N67\n41"]
69 [shape="circle" label="N69\n40"]
70 [shape="circle" label="N70\n39"]
71 [shape="circle" label="N71\n38"]
72 [shape="circle" label="N72\n37"]
73 [shape="circle" label="N73\n36"]
74 [shape="circle" label="N74\n35"]
58 [shape="circle" label="N58\n34"]
60 [shape="circle" label="N60\n33"]
61 [shape="circle" label="N61\n32"]
62 [shape="circle" label="N62\n31"]
63 [shape="circle" label="N63\n30"]
64 [shape="circle" label="N64\n29"]
65 [shape="circle" label="N65\n28"]
49 [shape="circle" label="N49\n27"]
51 [shape="circle" label="N51\n26"]
52 [shape="circle" label="N52\n25"]
53 [shape="circle" label="N53\n24"]
54 [shape="circle" label="N54\n23"]
55 [shape="circle" label="N55\n22"]
56 [shape="circle" label="N56\n21"]
40 [shape="circle" label="N40\n20"]
42 [shape="circle" label="N42\n19"]
43 [shape="circle" label="N43\n18"]
44 [shape="circle" label="N44\n17"]
45 [shape="circle" label="N45\n16"]
46 [shape="circle" label="N46\n15"]
47 [shape="circle" label="N47\n14"]
31 [shape="circle" label="N31\n13"]
33 [shape="circle" label="N33\n12"]
34 [shape="circle" label="N34\n11"]
35 [shape="circle" label="N35\n10"]
36 [shape="circle" label="N36\n9"]
37 [shape="circle" label="N37\n8"]
38 [shape="circle" label="N38\n7"]
21 [shape="circle" label="N21\n6"]
23 [shape="circle" label="N23\n5"]
24 [shape="circle" label="N24\n4"]
25 [shape="circle" label="N25\n3"]
26 [shape="circle" label="N26\n2"]
27 [shape="circle" label="N27\n1"]
28 [shape="circle" label="N28\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
5 -> 6 [label="Function start dummy edge"]
6 -> 8 [label="[cond == 0]"]
6 -> 7 [label="[!(cond == 0)]"]
7 -> 4 [label="return;"]
8 -> 9 [label="Label: ERROR"]
9 -> 10 [label="reach_error();" style="dotted" arrowhead="empty"]
9 -> 10 [label="reach_error();"]
10 -> 84 [label="abort();"]}
subgraph cluster_main {
label="main()"
14 -> 77 [label="INIT GLOBAL VARS"]
77 -> 78 [label="void abort();"]
78 -> 79 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
79 -> 80 [label="void reach_error();"]
80 -> 81 [label="unsigned int __VERIFIER_nondet_uint();"]
81 -> 82 [label="void __VERIFIER_assert(int cond);"]
82 -> 83 [label="int main();"]
83 -> 15 [label="Function start dummy edge"]
15 -> 16 [label="unsigned int n = 10000;"]
16 -> 17 [label="unsigned int x = n;"]
17 -> 18 [label="unsigned int y = 0;"]
18 -> 19 [label="unsigned int z;"]
19 -> 20 [label="while"]
20 -> 21 [label="[x > 0]"]
20 -> 22 [label="[!(x > 0)]"]
22 -> 29 [label="z = y;"]
29 -> 30 [label="while"]
30 -> 31 [label="[z > 0]"]
30 -> 32 [label="[!(z > 0)]"]
32 -> 39 [label="while"]
39 -> 40 [label="[y > 0]"]
39 -> 41 [label="[!(y > 0)]"]
41 -> 48 [label="while"]
48 -> 49 [label="[x > 0]"]
48 -> 50 [label="[!(x > 0)]"]
50 -> 57 [label="while"]
57 -> 58 [label="[z > 0]"]
57 -> 59 [label="[!(z > 0)]"]
59 -> 66 [label="while"]
66 -> 67 [label="[y > 0]"]
66 -> 68 [label="[!(y > 0)]"]
68 -> 75 [label="__VERIFIER_assert(x == 0);" style="dotted" arrowhead="empty"]
68 -> 75 [label="__VERIFIER_assert(x == 0);"]
75 -> 13 [label="return 0;"]
67 -> 69 [label="unsigned int __CPAchecker_TMP_10 = y;"]
69 -> 70 [label="y = y - 1;"]
70 -> 71 [label="__CPAchecker_TMP_10;"]
71 -> 72 [label="unsigned int __CPAchecker_TMP_11 = x;"]
72 -> 73 [label="x = x - 1;"]
73 -> 74 [label="__CPAchecker_TMP_11;"]
74 -> 66 [label=""]
58 -> 60 [label="unsigned int __CPAchecker_TMP_8 = x;"]
60 -> 61 [label="x = x + 1;"]
61 -> 62 [label="__CPAchecker_TMP_8;"]
62 -> 63 [label="unsigned int __CPAchecker_TMP_9 = z;"]
63 -> 64 [label="z = z - 1;"]
64 -> 65 [label="__CPAchecker_TMP_9;"]
65 -> 57 [label=""]
49 -> 51 [label="unsigned int __CPAchecker_TMP_6 = x;"]
51 -> 52 [label="x = x - 1;"]
52 -> 53 [label="__CPAchecker_TMP_6;"]
53 -> 54 [label="unsigned int __CPAchecker_TMP_7 = y;"]
54 -> 55 [label="y = y + 1;"]
55 -> 56 [label="__CPAchecker_TMP_7;"]
56 -> 48 [label=""]
40 -> 42 [label="unsigned int __CPAchecker_TMP_4 = y;"]
42 -> 43 [label="y = y - 1;"]
43 -> 44 [label="__CPAchecker_TMP_4;"]
44 -> 45 [label="unsigned int __CPAchecker_TMP_5 = z;"]
45 -> 46 [label="z = z + 1;"]
46 -> 47 [label="__CPAchecker_TMP_5;"]
47 -> 39 [label=""]
31 -> 33 [label="unsigned int __CPAchecker_TMP_2 = x;"]
33 -> 34 [label="x = x + 1;"]
34 -> 35 [label="__CPAchecker_TMP_2;"]
35 -> 36 [label="unsigned int __CPAchecker_TMP_3 = z;"]
36 -> 37 [label="z = z - 1;"]
37 -> 38 [label="__CPAchecker_TMP_3;"]
38 -> 30 [label=""]
21 -> 23 [label="unsigned int __CPAchecker_TMP_0 = x;"]
23 -> 24 [label="x = x - 1;"]
24 -> 25 [label="__CPAchecker_TMP_0;"]
25 -> 26 [label="unsigned int __CPAchecker_TMP_1 = y;"]
26 -> 27 [label="y = y + 1;"]
27 -> 28 [label="__CPAchecker_TMP_1;"]
28 -> 20 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 85 [label="__assert_fail(\"0\", \"in-de62.c\", 3, \"reach_error\");"]}
68 -> 5 [label="__VERIFIER_assert(x == 0)"]
4 -> 75 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(x == 0);"]
9 -> 1 [label="reach_error()"]}